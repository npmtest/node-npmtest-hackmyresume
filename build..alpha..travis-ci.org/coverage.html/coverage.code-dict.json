{"/home/travis/build/npmtest/node-npmtest-hackmyresume/test.js":"/* istanbul instrument in package npmtest_hackmyresume */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/lib.npmtest_hackmyresume.js":"/* istanbul instrument in package npmtest_hackmyresume */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hackmyresume = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hackmyresume = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hackmyresume && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hackmyresume */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hackmyresume\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hackmyresume.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hackmyresume.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hackmyresume.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hackmyresume.__dirname + '/lib.npmtest_hackmyresume.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/index.js":"\n/**\nExternal API surface for HackMyResume.\n@license MIT. See LICENSE.md for details.\n@module hackmycore/index\n */\n\n\n/** API facade for HackMyResume. */\n\n(function() {\n  module.exports = {\n    verbs: {\n      build: require('./verbs/build'),\n      analyze: require('./verbs/analyze'),\n      validate: require('./verbs/validate'),\n      convert: require('./verbs/convert'),\n      \"new\": require('./verbs/create'),\n      peek: require('./verbs/peek')\n    },\n    alias: {\n      generate: require('./verbs/build'),\n      create: require('./verbs/create')\n    },\n    options: require('./core/default-options'),\n    formats: require('./core/default-formats'),\n    Sheet: require('./core/fresh-resume'),\n    FRESHResume: require('./core/fresh-resume'),\n    JRSResume: require('./core/jrs-resume'),\n    FRESHTheme: require('./core/fresh-theme'),\n    JRSTheme: require('./core/jrs-theme'),\n    ResumeFactory: require('./core/resume-factory'),\n    FluentDate: require('./core/fluent-date'),\n    HtmlGenerator: require('./generators/html-generator'),\n    TextGenerator: require('./generators/text-generator'),\n    HtmlPdfCliGenerator: require('./generators/html-pdf-cli-generator'),\n    WordGenerator: require('./generators/word-generator'),\n    MarkdownGenerator: require('./generators/markdown-generator'),\n    JsonGenerator: require('./generators/json-generator'),\n    YamlGenerator: require('./generators/yaml-generator'),\n    JsonYamlGenerator: require('./generators/json-yaml-generator'),\n    LaTeXGenerator: require('./generators/latex-generator'),\n    HtmlPngGenerator: require('./generators/html-png-generator')\n  };\n\n}).call(this);\n\n//# sourceMappingURL=index.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/verbs/build.js":"\n/**\nImplementation of the 'build' verb for HackMyResume.\n@module verbs/build\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var BuildVerb, FRESHTheme, FS, HMEVENT, HMSTATUS, JRSTheme, MD, MKDIRP, PATH, RConverter, RTYPES, ResumeFactory, Verb, _, _addFreebieFormats, _build, _err, _expand, _fmts, _loadTheme, _log, _opts, _prep, _rezObj, _single, _verifyOutputs, _verifyTheme, addFreebieFormats, build, expand, extend, loadTheme, parsePath, prep, single, verifyOutputs, verifyTheme,\n    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  _ = require('underscore');\n\n  PATH = require('path');\n\n  FS = require('fs');\n\n  MD = require('marked');\n\n  MKDIRP = require('mkdirp');\n\n  extend = require('extend');\n\n  parsePath = require('parse-filepath');\n\n  RConverter = require('fresh-jrs-converter');\n\n  HMSTATUS = require('../core/status-codes');\n\n  HMEVENT = require('../core/event-codes');\n\n  RTYPES = {\n    FRESH: require('../core/fresh-resume'),\n    JRS: require('../core/jrs-resume')\n  };\n\n  _opts = require('../core/default-options');\n\n  FRESHTheme = require('../core/fresh-theme');\n\n  JRSTheme = require('../core/jrs-theme');\n\n  ResumeFactory = require('../core/resume-factory');\n\n  _fmts = require('../core/default-formats');\n\n  Verb = require('../verbs/verb');\n\n  _err = null;\n\n  _log = null;\n\n  _rezObj = null;\n\n  build = null;\n\n  prep = null;\n\n  single = null;\n\n  verifyOutputs = null;\n\n  addFreebieFormats = null;\n\n  expand = null;\n\n  verifyTheme = null;\n\n  loadTheme = null;\n\n\n  /** An invokable resume generation command. */\n\n  module.exports = BuildVerb = (function(superClass) {\n    extend1(BuildVerb, superClass);\n\n\n    /** Create a new build verb. */\n\n    function BuildVerb() {\n      BuildVerb.__super__.constructor.call(this, 'build', _build);\n    }\n\n    return BuildVerb;\n\n  })(Verb);\n\n\n  /**\n  Given a source resume in FRESH or JRS format, a destination resume path, and a\n  theme file, generate 0..N resumes in the desired formats.\n  @param src Path to the source JSON resume file: \"rez/resume.json\".\n  @param dst An array of paths to the target resume file(s).\n  @param opts Generation options.\n   */\n\n  _build = function(src, dst, opts) {\n    var inv, isFRESH, mixed, newEx, orgFormat, problemSheets, results, rez, sheetObjects, sheets, tFolder, targets, theme, toFormat;\n    if (!src || !src.length) {\n      this.err(HMSTATUS.resumeNotFound, {\n        quit: true\n      });\n      return null;\n    }\n    _prep.call(this, src, dst, opts);\n    sheetObjects = ResumeFactory.load(src, {\n      format: null,\n      objectify: false,\n      quit: true,\n      inner: {\n        sort: _opts.sort\n      }\n    }, this);\n    problemSheets = _.filter(sheetObjects, function(so) {\n      return so.fluenterror;\n    });\n    if (problemSheets && problemSheets.length) {\n      problemSheets[0].quit = true;\n      this.err(problemSheets[0].fluenterror, problemSheets[0]);\n      return null;\n    }\n    sheets = sheetObjects.map(function(r) {\n      return r.json;\n    });\n    theme = null;\n    this.stat(HMEVENT.beforeTheme, {\n      theme: _opts.theme\n    });\n    try {\n      tFolder = _verifyTheme.call(this, _opts.theme);\n      if (tFolder.fluenterror) {\n        tFolder.quit = true;\n        this.err(tFolder.fluenterror, tFolder);\n        return;\n      }\n      theme = _opts.themeObj = _loadTheme(tFolder);\n      _addFreebieFormats(theme);\n    } catch (_error) {\n      newEx = {\n        fluenterror: HMSTATUS.themeLoad,\n        inner: _error,\n        attempted: _opts.theme,\n        quit: true\n      };\n      this.err(HMSTATUS.themeLoad, newEx);\n      return null;\n    }\n    this.stat(HMEVENT.afterTheme, {\n      theme: theme\n    });\n    inv = _verifyOutputs.call(this, dst, theme);\n    if (inv && inv.length) {\n      this.err(HMSTATUS.invalidFormat, {\n        data: inv,\n        theme: theme,\n        quit: true\n      });\n      return null;\n    }\n    rez = null;\n    if (sheets.length > 1) {\n      isFRESH = !sheets[0].basics;\n      mixed = _.any(sheets, function(s) {\n        if (isFRESH) {\n          return s.basics;\n        } else {\n          return !s.basics;\n        }\n      });\n      this.stat(HMEVENT.beforeMerge, {\n        f: _.clone(sheetObjects),\n        mixed: mixed\n      });\n      if (mixed) {\n        this.err(HMSTATUS.mixedMerge);\n      }\n      rez = _.reduceRight(sheets, function(a, b, idx) {\n        return extend(true, b, a);\n      });\n      this.stat(HMEVENT.afterMerge, {\n        r: rez\n      });\n    } else {\n      rez = sheets[0];\n    }\n    orgFormat = rez.basics ? 'JRS' : 'FRESH';\n    toFormat = theme.render ? 'JRS' : 'FRESH';\n    if (toFormat !== orgFormat) {\n      this.stat(HMEVENT.beforeInlineConvert);\n      rez = RConverter['to' + toFormat](rez);\n      this.stat(HMEVENT.afterInlineConvert, {\n        file: sheetObjects[0].file,\n        fmt: toFormat\n      });\n    }\n    this.stat(HMEVENT.applyTheme, {\n      r: rez,\n      theme: theme\n    });\n    _rezObj = new RTYPES[toFormat]().parseJSON(rez);\n    targets = _expand(dst, theme);\n    _.each(targets, function(t) {\n      var ref;\n      if (this.hasError() && opts.assert) {\n        return {};\n      }\n      t.final = _single.call(this, t, theme, targets);\n      if ((ref = t.final) != null ? ref.fluenterror : void 0) {\n        t.final.quit = opts.assert;\n        this.err(t.final.fluenterror, t.final);\n      }\n    }, this);\n    results = {\n      sheet: _rezObj,\n      targets: targets,\n      processed: targets\n    };\n    if (this.hasError() && !opts.assert) {\n      this.reject(results);\n    } else if (!this.hasError()) {\n      this.resolve(results);\n    }\n    return results;\n  };\n\n\n  /**\n  Prepare for a BUILD run.\n   */\n\n  _prep = function(src, dst, opts) {\n    var that;\n    _opts.theme = (opts.theme && opts.theme.toLowerCase().trim()) || 'modern';\n    _opts.prettify = opts.prettify === true;\n    _opts.css = opts.css;\n    _opts.pdf = opts.pdf;\n    _opts.wrap = opts.wrap || 60;\n    _opts.stitles = opts.sectionTitles;\n    _opts.tips = opts.tips;\n    _opts.errHandler = opts.errHandler;\n    _opts.noTips = opts.noTips;\n    _opts.debug = opts.debug;\n    _opts.sort = opts.sort;\n    that = this;\n    _opts.onTransform = function(info) {\n      that.stat(HMEVENT.afterTransform, info);\n    };\n    _opts.beforeWrite = function(info) {\n      that.stat(HMEVENT.beforeWrite, info);\n    };\n    _opts.afterWrite = function(info) {\n      that.stat(HMEVENT.afterWrite, info);\n    };\n    (src.length > 1 && (!dst || !dst.length)) && dst.push(src.pop());\n  };\n\n\n  /**\n  Generate a single target resume such as \"out/rez.html\" or \"out/rez.doc\".\n  TODO: Refactor.\n  @param targInfo Information for the target resume.\n  @param theme A FRESHTheme or JRSTheme object.\n   */\n\n  _single = function(targInfo, theme, finished) {\n    var e, ex, f, fName, fType, outFolder, ret, theFormat;\n    ret = null;\n    ex = null;\n    f = targInfo.file;\n    try {\n      if (!targInfo.fmt) {\n        return {};\n      }\n      fType = targInfo.fmt.outFormat;\n      fName = PATH.basename(f, '.' + fType);\n      theFormat = null;\n      this.stat(HMEVENT.beforeGenerate, {\n        fmt: targInfo.fmt.outFormat,\n        file: PATH.relative(process.cwd(), f)\n      });\n      _opts.targets = finished;\n      if (targInfo.fmt.files && targInfo.fmt.files.length) {\n        theFormat = _fmts.filter(function(fmt) {\n          return fmt.name === targInfo.fmt.outFormat;\n        })[0];\n        MKDIRP.sync(PATH.dirname(f));\n        ret = theFormat.gen.generate(_rezObj, f, _opts);\n      } else {\n        theFormat = _fmts.filter(function(fmt) {\n          return fmt.name === targInfo.fmt.outFormat;\n        })[0];\n        outFolder = PATH.dirname(f);\n        MKDIRP.sync(outFolder);\n        ret = theFormat.gen.generate(_rezObj, f, _opts);\n      }\n    } catch (_error) {\n      e = _error;\n      ex = e;\n    }\n    this.stat(HMEVENT.afterGenerate, {\n      fmt: targInfo.fmt.outFormat,\n      file: PATH.relative(process.cwd(), f),\n      error: ex\n    });\n    if (ex) {\n      if (ex.fluenterror) {\n        ret = ex;\n      } else {\n        ret = {\n          fluenterror: HMSTATUS.generateError,\n          inner: ex\n        };\n      }\n    }\n    return ret;\n  };\n\n\n  /** Ensure that user-specified outputs/targets are valid. */\n\n  _verifyOutputs = function(targets, theme) {\n    this.stat(HMEVENT.verifyOutputs, {\n      targets: targets,\n      theme: theme\n    });\n    return _.reject(targets.map(function(t) {\n      var pathInfo;\n      pathInfo = parsePath(t);\n      return {\n        format: pathInfo.extname.substr(1)\n      };\n    }), function(t) {\n      return t.format === 'all' || theme.hasFormat(t.format);\n    });\n  };\n\n\n  /**\n  Reinforce the chosen theme with \"freebie\" formats provided by HackMyResume.\n  A \"freebie\" format is an output format such as JSON, YML, or PNG that can be\n  generated directly from the resume model or from one of the theme's declared\n  output formats. For example, the PNG format can be generated for any theme\n  that declares an HTML format; the theme doesn't have to provide an explicit\n  PNG template.\n  @param theTheme A FRESHTheme or JRSTheme object.\n   */\n\n  _addFreebieFormats = function(theTheme) {\n    theTheme.formats.json = theTheme.formats.json || {\n      freebie: true,\n      title: 'json',\n      outFormat: 'json',\n      pre: 'json',\n      ext: 'json',\n      path: null,\n      data: null\n    };\n    theTheme.formats.yml = theTheme.formats.yml || {\n      freebie: true,\n      title: 'yaml',\n      outFormat: 'yml',\n      pre: 'yml',\n      ext: 'yml',\n      path: null,\n      data: null\n    };\n    if (theTheme.formats.html && !theTheme.formats.png) {\n      theTheme.formats.png = {\n        freebie: true,\n        title: 'png',\n        outFormat: 'png',\n        ext: 'yml',\n        path: null,\n        data: null\n      };\n    }\n  };\n\n\n  /**\n  Expand output files. For example, \"foo.all\" should be expanded to\n  [\"foo.html\", \"foo.doc\", \"foo.pdf\", \"etc\"].\n  @param dst An array of output files as specified by the user.\n  @param theTheme A FRESHTheme or JRSTheme object.\n   */\n\n  _expand = function(dst, theTheme) {\n    var destColl, targets;\n    destColl = (dst && dst.length && dst) || [PATH.normalize('out/resume.all')];\n    targets = [];\n    destColl.forEach(function(t) {\n      var fmat, pa, to;\n      to = PATH.resolve(t);\n      pa = parsePath(to);\n      fmat = pa.extname || '.all';\n      return targets.push.apply(targets, fmat === '.all' ? Object.keys(theTheme.formats).map(function(k) {\n        var z;\n        z = theTheme.formats[k];\n        return {\n          file: to.replace(/all$/g, z.outFormat),\n          fmt: z\n        };\n      }) : [\n        {\n          file: to,\n          fmt: theTheme.getFormat(fmat.slice(1))\n        }\n      ]);\n    });\n    return targets;\n  };\n\n\n  /**\n  Verify the specified theme name/path.\n   */\n\n  _verifyTheme = function(themeNameOrPath) {\n    var exists, tFolder;\n    tFolder = PATH.join(parsePath(require.resolve('fresh-themes')).dirname, '/themes/', themeNameOrPath);\n    exists = require('path-exists').sync;\n    if (!exists(tFolder)) {\n      tFolder = PATH.resolve(themeNameOrPath);\n      if (!exists(tFolder)) {\n        return {\n          fluenterror: HMSTATUS.themeNotFound,\n          data: _opts.theme\n        };\n      }\n    }\n    return tFolder;\n  };\n\n\n  /**\n  Load the specified theme, which could be either a FRESH theme or a JSON Resume\n  theme.\n   */\n\n  _loadTheme = function(tFolder) {\n    var theTheme;\n    theTheme = _opts.theme.indexOf('jsonresume-theme-') > -1 ? new JRSTheme().open(tFolder) : new FRESHTheme().open(tFolder);\n    _opts.themeObj = theTheme;\n    return theTheme;\n  };\n\n}).call(this);\n\n//# sourceMappingURL=build.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/status-codes.js":"\n/**\nStatus codes for HackMyResume.\n@module core/status-codes\n@license MIT. See LICENSE.MD for details.\n */\n\n(function() {\n  module.exports = {\n    success: 0,\n    themeNotFound: 1,\n    copyCss: 2,\n    resumeNotFound: 3,\n    missingCommand: 4,\n    invalidCommand: 5,\n    resumeNotFoundAlt: 6,\n    inputOutputParity: 7,\n    createNameMissing: 8,\n    pdfGeneration: 9,\n    missingPackageJSON: 10,\n    invalid: 11,\n    invalidFormat: 12,\n    notOnPath: 13,\n    readError: 14,\n    parseError: 15,\n    fileSaveError: 16,\n    generateError: 17,\n    invalidHelperUse: 18,\n    mixedMerge: 19,\n    invokeTemplate: 20,\n    compileTemplate: 21,\n    themeLoad: 22,\n    invalidParamCount: 23,\n    missingParam: 24,\n    createError: 25,\n    validateError: 26\n  };\n\n}).call(this);\n\n//# sourceMappingURL=status-codes.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/event-codes.js":"\n/*\nEvent code definitions.\n@module core/event-codes\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  module.exports = {\n    error: -1,\n    success: 0,\n    begin: 1,\n    end: 2,\n    beforeRead: 3,\n    afterRead: 4,\n    beforeCreate: 5,\n    afterCreate: 6,\n    beforeTheme: 7,\n    afterTheme: 8,\n    beforeMerge: 9,\n    afterMerge: 10,\n    beforeGenerate: 11,\n    afterGenerate: 12,\n    beforeAnalyze: 13,\n    afterAnalyze: 14,\n    beforeConvert: 15,\n    afterConvert: 16,\n    verifyOutputs: 17,\n    beforeParse: 18,\n    afterParse: 19,\n    beforePeek: 20,\n    afterPeek: 21,\n    beforeInlineConvert: 22,\n    afterInlineConvert: 23,\n    beforeValidate: 24,\n    afterValidate: 25,\n    beforeWrite: 26,\n    afterWrite: 27,\n    applyTheme: 28\n  };\n\n}).call(this);\n\n//# sourceMappingURL=event-codes.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/fresh-resume.js":"\n/**\nDefinition of the FRESHResume class.\n@license MIT. See LICENSE.md for details.\n@module core/fresh-resume\n */\n\n(function() {\n  var AbstractResume, CONVERTER, FS, FluentDate, FreshResume, JRSResume, MD, PATH, XML, _, __, _parseDates, extend, moment, validator,\n    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  FS = require('fs');\n\n  extend = require('extend');\n\n  validator = require('is-my-json-valid');\n\n  _ = require('underscore');\n\n  __ = require('lodash');\n\n  PATH = require('path');\n\n  moment = require('moment');\n\n  XML = require('xml-escape');\n\n  MD = require('marked');\n\n  CONVERTER = require('fresh-jrs-converter');\n\n  JRSResume = require('./jrs-resume');\n\n  FluentDate = require('./fluent-date');\n\n  AbstractResume = require('./abstract-resume');\n\n\n  /**\n  A FRESH resume or CV. FRESH resumes are backed by JSON, and each FreshResume\n  object is an instantiation of that JSON decorated with utility methods.\n  @constructor\n   */\n\n  FreshResume = (function(superClass) {\n    extend1(FreshResume, superClass);\n\n    function FreshResume() {\n      return FreshResume.__super__.constructor.apply(this, arguments);\n    }\n\n\n    /** Initialize the the FreshResume from JSON string data. */\n\n    FreshResume.prototype.parse = function(stringData, opts) {\n      var ref;\n      this.imp = (ref = this.imp) != null ? ref : {\n        raw: stringData\n      };\n      return this.parseJSON(JSON.parse(stringData), opts);\n    };\n\n\n    /**\n    Initialize the FreshResume from JSON.\n    Open and parse the specified FRESH resume. Merge the JSON object model onto\n    this Sheet instance with extend() and convert sheet dates to a safe &\n    consistent format. Then sort each section by startDate descending.\n    @param rep {Object} The raw JSON representation.\n    @param opts {Object} Resume loading and parsing options.\n    {\n      date: Perform safe date conversion.\n      sort: Sort resume items by date.\n      compute: Prepare computed resume totals.\n    }\n     */\n\n    FreshResume.prototype.parseJSON = function(rep, opts) {\n      var ignoreList, ref, scrubbed, that, traverse;\n      that = this;\n      traverse = require('traverse');\n      ignoreList = [];\n      scrubbed = traverse(rep).map(function(x) {\n        if (!this.isLeaf && this.node.ignore) {\n          if (this.node.ignore === true || this.node.ignore === 'true') {\n            ignoreList.push(this.node);\n            return this.remove();\n          }\n        }\n      });\n      extend(true, this, scrubbed);\n      if (!((ref = this.imp) != null ? ref.processed : void 0)) {\n        opts = opts || {};\n        if (opts.imp === void 0 || opts.imp) {\n          this.imp = this.imp || {};\n          this.imp.title = (opts.title || this.imp.title) || this.name;\n          if (!this.imp.raw) {\n            this.imp.raw = JSON.stringify(rep);\n          }\n        }\n        this.imp.processed = true;\n        (opts.date === void 0 || opts.date) && _parseDates.call(this);\n        (opts.sort === void 0 || opts.sort) && this.sort();\n        (opts.compute === void 0 || opts.compute) && (this.computed = {\n          numYears: this.duration(),\n          keywords: this.keywords()\n        });\n      }\n      return this;\n    };\n\n\n    /** Save the sheet to disk (for environments that have disk access). */\n\n    FreshResume.prototype.save = function(filename) {\n      this.imp.file = filename || this.imp.file;\n      FS.writeFileSync(this.imp.file, this.stringify(), 'utf8');\n      return this;\n    };\n\n\n    /**\n    Save the sheet to disk in a specific format, either FRESH or JSON Resume.\n     */\n\n    FreshResume.prototype.saveAs = function(filename, format) {\n      var newRep;\n      if (format !== 'JRS') {\n        this.imp.file = filename || this.imp.file;\n        FS.writeFileSync(this.imp.file, this.stringify(), 'utf8');\n      } else {\n        newRep = CONVERTER.toJRS(this);\n        FS.writeFileSync(filename, JRSResume.stringify(newRep), 'utf8');\n      }\n      return this;\n    };\n\n\n    /**\n    Duplicate this FreshResume instance.\n    This method first extend()s this object onto an empty, creating a deep copy,\n    and then passes the result into a new FreshResume instance via .parseJSON.\n    We do it this way to create a true clone of the object without re-running any\n    of the associated processing.\n     */\n\n    FreshResume.prototype.dupe = function() {\n      var jso, rnew;\n      jso = extend(true, {}, this);\n      rnew = new FreshResume();\n      rnew.parseJSON(jso, {});\n      return rnew;\n    };\n\n\n    /**\n    Convert this object to a JSON string, sanitizing meta-properties along the\n    way.\n     */\n\n    FreshResume.prototype.stringify = function() {\n      return FreshResume.stringify(this);\n    };\n\n\n    /**\n    Create a copy of this resume in which all string fields have been run through\n    a transformation function (such as a Markdown filter or XML encoder).\n    TODO: Move this out of FRESHResume.\n     */\n\n    FreshResume.prototype.transformStrings = function(filt, transformer) {\n      var ret, trx;\n      ret = this.dupe();\n      trx = require('../utils/string-transformer');\n      return trx(ret, filt, transformer);\n    };\n\n\n    /**\n    Create a copy of this resume in which all fields have been interpreted as\n    Markdown.\n     */\n\n    FreshResume.prototype.markdownify = function() {\n      var MDIN, trx;\n      MDIN = function(txt) {\n        return MD(txt || '').replace(/^\\s*<p>|<\\/p>\\s*$/gi, '');\n      };\n      trx = function(key, val) {\n        if (key === 'summary') {\n          return MD(val);\n        }\n        return MDIN(val);\n      };\n      return this.transformStrings(['skills', 'url', 'start', 'end', 'date'], trx);\n    };\n\n\n    /**\n    Create a copy of this resume in which all fields have been interpreted as\n    Markdown.\n     */\n\n    FreshResume.prototype.xmlify = function() {\n      var trx;\n      trx = function(key, val) {\n        return XML(val);\n      };\n      return this.transformStrings([], trx);\n    };\n\n\n    /** Return the resume format. */\n\n    FreshResume.prototype.format = function() {\n      return 'FRESH';\n    };\n\n\n    /**\n    Return internal metadata. Create if it doesn't exist.\n     */\n\n    FreshResume.prototype.i = function() {\n      return this.imp = this.imp || {};\n    };\n\n\n    /** Return a unique list of all keywords across all skills. */\n\n    FreshResume.prototype.keywords = function() {\n      var flatSkills;\n      flatSkills = [];\n      if (this.skills) {\n        if (this.skills.sets) {\n          flatSkills = this.skills.sets.map(function(sk) {\n            return sk.skills;\n          }).reduce(function(a, b) {\n            return a.concat(b);\n          });\n        } else if (this.skills.list) {\n          flatSkills = flatSkills.concat(this.skills.list.map(function(sk) {\n            return sk.name;\n          }));\n        }\n        flatSkills = _.uniq(flatSkills);\n      }\n      return flatSkills;\n    };\n\n\n    /**\n    Reset the sheet to an empty state. TODO: refactor/review\n     */\n\n    FreshResume.prototype.clear = function(clearMeta) {\n      clearMeta = ((clearMeta === void 0) && true) || clearMeta;\n      if (clearMeta) {\n        delete this.imp;\n      }\n      delete this.computed;\n      delete this.employment;\n      delete this.service;\n      delete this.education;\n      delete this.recognition;\n      delete this.reading;\n      delete this.writing;\n      delete this.interests;\n      delete this.skills;\n      return delete this.social;\n    };\n\n\n    /**\n    Get a safe count of the number of things in a section.\n     */\n\n    FreshResume.prototype.count = function(obj) {\n      if (!obj) {\n        return 0;\n      }\n      if (obj.history) {\n        return obj.history.length;\n      }\n      if (obj.sets) {\n        return obj.sets.length;\n      }\n      return obj.length || 0;\n    };\n\n\n    /** Add work experience to the sheet. */\n\n    FreshResume.prototype.add = function(moniker) {\n      var defSheet, newObject;\n      defSheet = FreshResume[\"default\"]();\n      newObject = defSheet[moniker].history ? $.extend(true, {}, defSheet[moniker].history[0]) : moniker === 'skills' ? $.extend(true, {}, defSheet.skills.sets[0]) : $.extend(true, {}, defSheet[moniker][0]);\n      this[moniker] = this[moniker] || [];\n      if (this[moniker].history) {\n        this[moniker].history.push(newObject);\n      } else if (moniker === 'skills') {\n        this.skills.sets.push(newObject);\n      } else {\n        this[moniker].push(newObject);\n      }\n      return newObject;\n    };\n\n\n    /**\n    Determine if the sheet includes a specific social profile (eg, GitHub).\n     */\n\n    FreshResume.prototype.hasProfile = function(socialNetwork) {\n      socialNetwork = socialNetwork.trim().toLowerCase();\n      return this.social && _.some(this.social, function(p) {\n        return p.network.trim().toLowerCase() === socialNetwork;\n      });\n    };\n\n\n    /** Return the specified network profile. */\n\n    FreshResume.prototype.getProfile = function(socialNetwork) {\n      socialNetwork = socialNetwork.trim().toLowerCase();\n      return this.social && _.find(this.social, function(sn) {\n        return sn.network.trim().toLowerCase() === socialNetwork;\n      });\n    };\n\n\n    /**\n    Return an array of profiles for the specified network, for when the user\n    has multiple eg. GitHub accounts.\n     */\n\n    FreshResume.prototype.getProfiles = function(socialNetwork) {\n      socialNetwork = socialNetwork.trim().toLowerCase();\n      return this.social && _.filter(this.social, function(sn) {\n        return sn.network.trim().toLowerCase() === socialNetwork;\n      });\n    };\n\n\n    /** Determine if the sheet includes a specific skill. */\n\n    FreshResume.prototype.hasSkill = function(skill) {\n      skill = skill.trim().toLowerCase();\n      return this.skills && _.some(this.skills, function(sk) {\n        return sk.keywords && _.some(sk.keywords, function(kw) {\n          return kw.trim().toLowerCase() === skill;\n        });\n      });\n    };\n\n\n    /** Validate the sheet against the FRESH Resume schema. */\n\n    FreshResume.prototype.isValid = function(info) {\n      var ret, schemaObj, validate;\n      schemaObj = require('fresca');\n      validator = require('is-my-json-valid');\n      validate = validator(schemaObj, {\n        formats: {\n          date: /^\\d{4}(?:-(?:0[0-9]{1}|1[0-2]{1})(?:-[0-9]{2})?)?$/\n        }\n      });\n      ret = validate(this);\n      if (!ret) {\n        this.imp = this.imp || {};\n        this.imp.validationErrors = validate.errors;\n      }\n      return ret;\n    };\n\n    FreshResume.prototype.duration = function(unit) {\n      return FreshResume.__super__.duration.call(this, 'employment.history', 'start', 'end', unit);\n    };\n\n\n    /**\n    Sort dated things on the sheet by start date descending. Assumes that dates\n    on the sheet have been processed with _parseDates().\n     */\n\n    FreshResume.prototype.sort = function() {\n      var byDateDesc, sortSection;\n      byDateDesc = function(a, b) {\n        if (a.safe.start.isBefore(b.safe.start)) {\n          return 1;\n        } else {\n          if (a.safe.start.isAfter(b.safe.start)) {\n            return -1;\n          } else {\n            return 0;\n          }\n        }\n      };\n      sortSection = function(key) {\n        var ar, datedThings;\n        ar = __.get(this, key);\n        if (ar && ar.length) {\n          datedThings = obj.filter(function(o) {\n            return o.start;\n          });\n          return datedThings.sort(byDateDesc);\n        }\n      };\n      sortSection('employment.history');\n      sortSection('education.history');\n      sortSection('service.history');\n      sortSection('projects');\n      return this.writing && this.writing.sort(function(a, b) {\n        if (a.safe.date.isBefore(b.safe.date)) {\n          return 1;\n        } else {\n          return (a.safe.date.isAfter(b.safe.date) && -1) || 0;\n        }\n      });\n    };\n\n    return FreshResume;\n\n  })(AbstractResume);\n\n\n  /**\n  Get the default (starter) sheet.\n   */\n\n  FreshResume[\"default\"] = function() {\n    return new FreshResume().parseJSON(require('fresh-resume-starter').fresh);\n  };\n\n\n  /**\n  Convert the supplied FreshResume to a JSON string, sanitizing meta-properties\n  along the way.\n   */\n\n  FreshResume.stringify = function(obj) {\n    var replacer;\n    replacer = function(key, value) {\n      var exKeys;\n      exKeys = ['imp', 'warnings', 'computed', 'filt', 'ctrl', 'index', 'safe', 'result', 'isModified', 'htmlPreview', 'display_progress_bar'];\n      if (_.some(exKeys, function(val) {\n        return key.trim() === val;\n      })) {\n        return void 0;\n      } else {\n        return value;\n      }\n    };\n    return JSON.stringify(obj, replacer, 2);\n  };\n\n\n  /**\n  Convert human-friendly dates into formal Moment.js dates for all collections.\n  We don't want to lose the raw textual date as entered by the user, so we store\n  the Moment-ified date as a separate property with a prefix of .safe. For ex:\n  job.startDate is the date as entered by the user. job.safeStartDate is the\n  parsed Moment.js date that we actually use in processing.\n   */\n\n  _parseDates = function() {\n    var _fmt, replaceDatesInObject, that;\n    _fmt = require('./fluent-date').fmt;\n    that = this;\n    replaceDatesInObject = function(obj) {\n      if (!obj) {\n        return;\n      }\n      if (Object.prototype.toString.call(obj) === '[object Array]') {\n        obj.forEach(function(elem) {\n          return replaceDatesInObject(elem);\n        });\n      } else if (typeof obj === 'object') {\n        if (obj._isAMomentObject || obj.safe) {\n          return;\n        }\n        Object.keys(obj).forEach(function(key) {\n          return replaceDatesInObject(obj[key]);\n        });\n        ['start', 'end', 'date'].forEach(function(val) {\n          if ((obj[val] !== void 0) && (!obj.safe || !obj.safe[val])) {\n            obj.safe = obj.safe || {};\n            obj.safe[val] = _fmt(obj[val]);\n            if (obj[val] && (val === 'start') && !obj.end) {\n              obj.safe.end = _fmt('current');\n            }\n          }\n        });\n      }\n    };\n    Object.keys(this).forEach(function(member) {\n      replaceDatesInObject(that[member]);\n    });\n  };\n\n\n  /** Export the Sheet function/ctor. */\n\n  module.exports = FreshResume;\n\n}).call(this);\n\n//# sourceMappingURL=fresh-resume.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/jrs-resume.js":"\n/**\nDefinition of the JRSResume class.\n@license MIT. See LICENSE.md for details.\n@module core/jrs-resume\n */\n\n(function() {\n  var AbstractResume, CONVERTER, FS, JRSResume, MD, PATH, _, _parseDates, extend, moment, validator,\n    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  FS = require('fs');\n\n  extend = require('extend');\n\n  validator = require('is-my-json-valid');\n\n  _ = require('underscore');\n\n  PATH = require('path');\n\n  MD = require('marked');\n\n  CONVERTER = require('fresh-jrs-converter');\n\n  moment = require('moment');\n\n  AbstractResume = require('./abstract-resume');\n\n\n  /**\n  A JRS resume or CV. JRS resumes are backed by JSON, and each JRSResume object\n  is an instantiation of that JSON decorated with utility methods.\n  @class JRSResume\n   */\n\n  JRSResume = (function(superClass) {\n    var clear;\n\n    extend1(JRSResume, superClass);\n\n    function JRSResume() {\n      return JRSResume.__super__.constructor.apply(this, arguments);\n    }\n\n\n    /** Initialize the the JSResume from string. */\n\n    JRSResume.prototype.parse = function(stringData, opts) {\n      var ref;\n      this.imp = (ref = this.imp) != null ? ref : {\n        raw: stringData\n      };\n      return this.parseJSON(JSON.parse(stringData), opts);\n    };\n\n\n    /**\n    Initialize the JRSResume object from JSON.\n    Open and parse the specified JRS resume. Merge the JSON object model onto\n    this Sheet instance with extend() and convert sheet dates to a safe &\n    consistent format. Then sort each section by startDate descending.\n    @param rep {Object} The raw JSON representation.\n    @param opts {Object} Resume loading and parsing options.\n    {\n      date: Perform safe date conversion.\n      sort: Sort resume items by date.\n      compute: Prepare computed resume totals.\n    }\n     */\n\n    JRSResume.prototype.parseJSON = function(rep, opts) {\n      var ignoreList, ref, scrubbed, that, traverse;\n      opts = opts || {};\n      that = this;\n      traverse = require('traverse');\n      ignoreList = [];\n      scrubbed = traverse(rep).map(function(x) {\n        if (!this.isLeaf && this.node.ignore) {\n          if (this.node.ignore === true || this.node.ignore === 'true') {\n            ignoreList.push(this.node);\n            return this.remove();\n          }\n        }\n      });\n      extend(true, this, scrubbed);\n      if (!((ref = this.imp) != null ? ref.processed : void 0)) {\n        opts = opts || {};\n        if (opts.imp === void 0 || opts.imp) {\n          this.imp = this.imp || {};\n          this.imp.title = (opts.title || this.imp.title) || this.basics.name;\n          if (!this.imp.raw) {\n            this.imp.raw = JSON.stringify(rep);\n          }\n        }\n        this.imp.processed = true;\n      }\n      (opts.date === void 0 || opts.date) && _parseDates.call(this);\n      (opts.sort === void 0 || opts.sort) && this.sort();\n      if (opts.compute === void 0 || opts.compute) {\n        this.basics.computed = {\n          numYears: this.duration(),\n          keywords: this.keywords()\n        };\n      }\n      return this;\n    };\n\n\n    /** Save the sheet to disk (for environments that have disk access). */\n\n    JRSResume.prototype.save = function(filename) {\n      this.imp.file = filename || this.imp.file;\n      FS.writeFileSync(this.imp.file, this.stringify(this), 'utf8');\n      return this;\n    };\n\n\n    /** Save the sheet to disk in a specific format, either FRESH or JRS. */\n\n    JRSResume.prototype.saveAs = function(filename, format) {\n      var newRep, stringRep;\n      if (format === 'JRS') {\n        this.imp.file = filename || this.imp.file;\n        FS.writeFileSync(this.imp.file, this.stringify(), 'utf8');\n      } else {\n        newRep = CONVERTER.toFRESH(this);\n        stringRep = CONVERTER.toSTRING(newRep);\n        FS.writeFileSync(filename, stringRep, 'utf8');\n      }\n      return this;\n    };\n\n\n    /** Return the resume format. */\n\n    JRSResume.prototype.format = function() {\n      return 'JRS';\n    };\n\n    JRSResume.prototype.stringify = function() {\n      return JRSResume.stringify(this);\n    };\n\n\n    /** Return a unique list of all keywords across all skills. */\n\n    JRSResume.prototype.keywords = function() {\n      var flatSkills;\n      flatSkills = [];\n      if (this.skills && this.skills.length) {\n        this.skills.forEach(function(s) {\n          return flatSkills = _.union(flatSkills, s.keywords);\n        });\n      }\n      return flatSkills;\n    };\n\n\n    /**\n    Return internal metadata. Create if it doesn't exist.\n    JSON Resume v0.0.0 doesn't allow additional properties at the root level,\n    so tuck this into the .basic sub-object.\n     */\n\n    JRSResume.prototype.i = function() {\n      var ref;\n      return this.imp = (ref = this.imp) != null ? ref : {};\n    };\n\n\n    /** Reset the sheet to an empty state. */\n\n    clear = function(clearMeta) {\n      clearMeta = ((clearMeta === void 0) && true) || clearMeta;\n      if (clearMeta) {\n        delete this.imp;\n      }\n      delete this.basics.computed;\n      delete this.work;\n      delete this.volunteer;\n      delete this.education;\n      delete this.awards;\n      delete this.publications;\n      delete this.interests;\n      delete this.skills;\n      return delete this.basics.profiles;\n    };\n\n\n    /** Add work experience to the sheet. */\n\n    JRSResume.prototype.add = function(moniker) {\n      var defSheet, newObject;\n      defSheet = JRSResume[\"default\"]();\n      newObject = $.extend(true, {}, defSheet[moniker][0]);\n      this[moniker] = this[moniker] || [];\n      this[moniker].push(newObject);\n      return newObject;\n    };\n\n\n    /** Determine if the sheet includes a specific social profile (eg, GitHub). */\n\n    JRSResume.prototype.hasProfile = function(socialNetwork) {\n      socialNetwork = socialNetwork.trim().toLowerCase();\n      return this.basics.profiles && _.some(this.basics.profiles, function(p) {\n        return p.network.trim().toLowerCase() === socialNetwork;\n      });\n    };\n\n\n    /** Determine if the sheet includes a specific skill. */\n\n    JRSResume.prototype.hasSkill = function(skill) {\n      skill = skill.trim().toLowerCase();\n      return this.skills && _.some(this.skills, function(sk) {\n        return sk.keywords && _.some(sk.keywords, function(kw) {\n          return kw.trim().toLowerCase() === skill;\n        });\n      });\n    };\n\n\n    /** Validate the sheet against the JSON Resume schema. */\n\n    JRSResume.prototype.isValid = function() {\n      var ret, schema, schemaObj, temp, validate;\n      schema = FS.readFileSync(PATH.join(__dirname, 'resume.json'), 'utf8');\n      schemaObj = JSON.parse(schema);\n      validator = require('is-my-json-valid');\n      validate = validator(schemaObj, {\n        formats: {\n          date: /^\\d{4}(?:-(?:0[0-9]{1}|1[0-2]{1})(?:-[0-9]{2})?)?$/\n        }\n      });\n      temp = this.imp;\n      delete this.imp;\n      ret = validate(this);\n      this.imp = temp;\n      if (!ret) {\n        this.imp = this.imp || {};\n        this.imp.validationErrors = validate.errors;\n      }\n      return ret;\n    };\n\n    JRSResume.prototype.duration = function(unit) {\n      return JRSResume.__super__.duration.call(this, 'work', 'startDate', 'endDate', unit);\n    };\n\n\n    /**\n    Sort dated things on the sheet by start date descending. Assumes that dates\n    on the sheet have been processed with _parseDates().\n     */\n\n    JRSResume.prototype.sort = function() {\n      var byDateDesc;\n      byDateDesc = function(a, b) {\n        if (a.safeStartDate.isBefore(b.safeStartDate)) {\n          return 1;\n        } else {\n          return (a.safeStartDate.isAfter(b.safeStartDate) && -1) || 0;\n        }\n      };\n      this.work && this.work.sort(byDateDesc);\n      this.education && this.education.sort(byDateDesc);\n      this.volunteer && this.volunteer.sort(byDateDesc);\n      this.awards && this.awards.sort(function(a, b) {\n        if (a.safeDate.isBefore(b.safeDate)) {\n          return 1;\n        } else {\n          return (a.safeDate.isAfter(b.safeDate) && -1) || 0;\n        }\n      });\n      return this.publications && this.publications.sort(function(a, b) {\n        if (a.safeReleaseDate.isBefore(b.safeReleaseDate)) {\n          return 1;\n        } else {\n          return (a.safeReleaseDate.isAfter(b.safeReleaseDate) && -1) || 0;\n        }\n      });\n    };\n\n    JRSResume.prototype.dupe = function() {\n      var rnew;\n      rnew = new JRSResume();\n      rnew.parse(this.stringify(), {});\n      return rnew;\n    };\n\n\n    /**\n    Create a copy of this resume in which all fields have been interpreted as\n    Markdown.\n     */\n\n    JRSResume.prototype.harden = function() {\n      var HD, HDIN, hardenStringsInObject, ret, that;\n      that = this;\n      ret = this.dupe();\n      HD = function(txt) {\n        return '@@@@~' + txt + '~@@@@';\n      };\n      HDIN = function(txt) {\n        return HD(txt);\n      };\n      hardenStringsInObject = function(obj, inline) {\n        if (!obj) {\n          return;\n        }\n        inline = inline === void 0 || inline;\n        if (Object.prototype.toString.call(obj) === '[object Array]') {\n          return obj.forEach(function(elem, idx, ar) {\n            if (typeof elem === 'string' || elem instanceof String) {\n              return ar[idx] = inline ? HDIN(elem) : HD(elem);\n            } else {\n              return hardenStringsInObject(elem);\n            }\n          });\n        } else if (typeof obj === 'object') {\n          return Object.keys(obj).forEach(function(key) {\n            var sub;\n            sub = obj[key];\n            if (typeof sub === 'string' || sub instanceof String) {\n              if (_.contains(['skills', 'url', 'website', 'startDate', 'endDate', 'releaseDate', 'date', 'phone', 'email', 'address', 'postalCode', 'city', 'country', 'region'], key)) {\n                return;\n              }\n              if (key === 'summary') {\n                return obj[key] = HD(obj[key]);\n              } else {\n                return obj[key] = inline ? HDIN(obj[key]) : HD(obj[key]);\n              }\n            } else {\n              return hardenStringsInObject(sub);\n            }\n          });\n        }\n      };\n      Object.keys(ret).forEach(function(member) {\n        return hardenStringsInObject(ret[member]);\n      });\n      return ret;\n    };\n\n    return JRSResume;\n\n  })(AbstractResume);\n\n\n  /** Get the default (empty) sheet. */\n\n  JRSResume[\"default\"] = function() {\n    return new JRSResume().parseJSON(require('fresh-resume-starter').jrs);\n  };\n\n\n  /**\n  Convert this object to a JSON string, sanitizing meta-properties along the\n  way. Don't override .toString().\n   */\n\n  JRSResume.stringify = function(obj) {\n    var replacer;\n    replacer = function(key, value) {\n      var temp;\n      temp = _.some(['imp', 'warnings', 'computed', 'filt', 'ctrl', 'index', 'safeStartDate', 'safeEndDate', 'safeDate', 'safeReleaseDate', 'result', 'isModified', 'htmlPreview', 'display_progress_bar'], function(val) {\n        return key.trim() === val;\n      });\n      if (temp) {\n        return void 0;\n      } else {\n        return value;\n      }\n    };\n    return JSON.stringify(obj, replacer, 2);\n  };\n\n\n  /**\n  Convert human-friendly dates into formal Moment.js dates for all collections.\n  We don't want to lose the raw textual date as entered by the user, so we store\n  the Moment-ified date as a separate property with a prefix of .safe. For ex:\n  job.startDate is the date as entered by the user. job.safeStartDate is the\n  parsed Moment.js date that we actually use in processing.\n   */\n\n  _parseDates = function() {\n    var _fmt;\n    _fmt = require('./fluent-date').fmt;\n    this.work && this.work.forEach(function(job) {\n      job.safeStartDate = _fmt(job.startDate);\n      return job.safeEndDate = _fmt(job.endDate);\n    });\n    this.education && this.education.forEach(function(edu) {\n      edu.safeStartDate = _fmt(edu.startDate);\n      return edu.safeEndDate = _fmt(edu.endDate);\n    });\n    this.volunteer && this.volunteer.forEach(function(vol) {\n      vol.safeStartDate = _fmt(vol.startDate);\n      return vol.safeEndDate = _fmt(vol.endDate);\n    });\n    this.awards && this.awards.forEach(function(awd) {\n      return awd.safeDate = _fmt(awd.date);\n    });\n    return this.publications && this.publications.forEach(function(pub) {\n      return pub.safeReleaseDate = _fmt(pub.releaseDate);\n    });\n  };\n\n\n  /**\n  Export the JRSResume function/ctor.\n   */\n\n  module.exports = JRSResume;\n\n}).call(this);\n\n//# sourceMappingURL=jrs-resume.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/abstract-resume.js":"\n/**\nDefinition of the AbstractResume class.\n@license MIT. See LICENSE.md for details.\n@module core/abstract-resume\n */\n\n(function() {\n  var AbstractResume, FluentDate, _, __;\n\n  _ = require('underscore');\n\n  __ = require('lodash');\n\n  FluentDate = require('./fluent-date');\n\n  AbstractResume = (function() {\n    function AbstractResume() {}\n\n\n    /**\n    Compute the total duration of the work history.\n    @returns The total duration of the sheet's work history, that is, the number\n    of years between the start date of the earliest job on the resume and the\n    *latest end date of all jobs in the work history*. This last condition is for\n    sheets that have overlapping jobs.\n     */\n\n    AbstractResume.prototype.duration = function(collKey, startKey, endKey, unit) {\n      var firstDate, hist, lastDate, new_e;\n      unit = unit || 'years';\n      hist = __.get(this, collKey);\n      if (!hist || !hist.length) {\n        return 0;\n      }\n      new_e = hist.map(function(job) {\n        var obj;\n        obj = _.pick(job, [startKey, endKey]);\n        if (!_.has(obj, endKey)) {\n          obj[endKey] = 'current';\n        }\n        if (obj && (obj[startKey] || obj[endKey])) {\n          obj = _.pairs(obj);\n          obj[0][1] = FluentDate.fmt(obj[0][1]);\n          if (obj.length > 1) {\n            obj[1][1] = FluentDate.fmt(obj[1][1]);\n          }\n        }\n        return obj;\n      });\n      new_e = _.filter(_.flatten(new_e, true), function(v) {\n        return v && v.length && v[0] && v[0].length;\n      });\n      if (!new_e || !new_e.length) {\n        return 0;\n      }\n      new_e = _.sortBy(new_e, function(elem) {\n        return elem[1].unix();\n      });\n      firstDate = _.first(new_e)[1];\n      lastDate = _.last(new_e)[1];\n      return lastDate.diff(firstDate, unit);\n    };\n\n    return AbstractResume;\n\n  })();\n\n  module.exports = AbstractResume;\n\n}).call(this);\n\n//# sourceMappingURL=abstract-resume.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/fluent-date.js":"\n/**\nThe HackMyResume date representation.\n@license MIT. See LICENSE.md for details.\n@module core/fluent-date\n */\n\n(function() {\n  var FluentDate, abbr, moment, months;\n\n  moment = require('moment');\n\n  require('../utils/string');\n\n\n  /**\n  Create a FluentDate from a string or Moment date object. There are a few date\n  formats to be aware of here.\n  1. The words \"Present\" and \"Now\", referring to the current date\n  2. The default \"YYYY-MM-DD\" format used in JSON Resume (\"2015-02-10\")\n  3. Year-and-month only (\"2015-04\")\n  4. Year-only \"YYYY\" (\"2015\")\n  5. The friendly HackMyResume \"mmm YYYY\" format (\"Mar 2015\" or \"Dec 2008\")\n  6. Empty dates (\"\", \" \")\n  7. Any other date format that Moment.js can parse from\n  Note: Moment can transparently parse all or most of these, without requiring us\n  to specify a date format...but for maximum parsing safety and to avoid Moment\n  deprecation warnings, it's recommended to either a) explicitly specify the date\n  format or b) use an ISO format. For clarity, we handle these cases explicitly.\n  @class FluentDate\n   */\n\n  FluentDate = (function() {\n    function FluentDate(dt) {\n      this.rep = this.fmt(dt);\n    }\n\n    FluentDate.isCurrent = function(dt) {\n      return !dt || (String.is(dt) && /^(present|now|current)$/.test(dt));\n    };\n\n    return FluentDate;\n\n  })();\n\n  months = {};\n\n  abbr = {};\n\n  moment.months().forEach(function(m, idx) {\n    return months[m.toLowerCase()] = idx + 1;\n  });\n\n  moment.monthsShort().forEach(function(m, idx) {\n    return abbr[m.toLowerCase()] = idx + 1;\n  });\n\n  abbr.sept = 9;\n\n  module.exports = FluentDate;\n\n  FluentDate.fmt = function(dt, throws) {\n    var month, mt, parts, ref, temp;\n    throws = (throws === void 0 || throws === null) || throws;\n    if (typeof dt === 'string' || dt instanceof String) {\n      dt = dt.toLowerCase().trim();\n      if (/^(present|now|current)$/.test(dt)) {\n        return moment();\n      } else if (/^\\D+\\s+\\d{4}$/.test(dt)) {\n        parts = dt.split(' ');\n        month = months[parts[0]] || abbr[parts[0]];\n        temp = parts[1] + '-' + ((ref = month < 10) != null ? ref : '0' + {\n          month: month.toString()\n        });\n        return moment(temp, 'YYYY-MM');\n      } else if (/^\\d{4}-\\d{1,2}$/.test(dt)) {\n        return moment(dt, 'YYYY-MM');\n      } else if (/^\\s*\\d{4}\\s*$/.test(dt)) {\n        return moment(dt, 'YYYY');\n      } else if (/^\\s*$/.test(dt)) {\n        return moment();\n      } else {\n        mt = moment(dt);\n        if (mt.isValid()) {\n          return mt;\n        }\n        if (throws) {\n          throw 'Invalid date format encountered.';\n        }\n        return null;\n      }\n    } else {\n      if (!dt) {\n        return moment();\n      } else if (dt.isValid && dt.isValid()) {\n        return dt;\n      }\n      if (throws) {\n        throw 'Unknown date object encountered.';\n      }\n      return null;\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=fluent-date.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/utils/string.js":"\n/**\nDefinitions of string utility functions.\n@module utils/string\n */\n\n\n/**\nDetermine if the string is null, empty, or whitespace.\nSee: http://stackoverflow.com/a/32800728/4942583\n@method isNullOrWhitespace\n */\n\n(function() {\n  String.isNullOrWhitespace = function(input) {\n    return !input || !input.trim();\n  };\n\n  String.prototype.endsWith = function(suffix) {\n    return this.indexOf(suffix, this.length - suffix.length) !== -1;\n  };\n\n  String.is = function(val) {\n    return typeof val === 'string' || val instanceof String;\n  };\n\n}).call(this);\n\n//# sourceMappingURL=string.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/default-options.js":"\n/*\nEvent code definitions.\n@module core/default-options\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  module.exports = {\n    theme: 'modern',\n    prettify: {\n      indent_size: 2,\n      unformatted: ['em', 'strong'],\n      max_char: 80\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=default-options.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/fresh-theme.js":"\n/**\nDefinition of the FRESHTheme class.\n@module core/fresh-theme\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var EXTEND, FRESHTheme, FS, HMSTATUS, PATH, READFILES, _, _load, _loadOne, friendlyName, loadSafeJson, moment, parsePath, pathExists, validator;\n\n  FS = require('fs');\n\n  validator = require('is-my-json-valid');\n\n  _ = require('underscore');\n\n  PATH = require('path');\n\n  parsePath = require('parse-filepath');\n\n  pathExists = require('path-exists').sync;\n\n  EXTEND = require('extend');\n\n  HMSTATUS = require('./status-codes');\n\n  moment = require('moment');\n\n  loadSafeJson = require('../utils/safe-json-loader');\n\n  READFILES = require('recursive-readdir-sync');\n\n\n  /* A representation of a FRESH theme asset.\n  @class FRESHTheme\n   */\n\n  FRESHTheme = (function() {\n    function FRESHTheme() {}\n\n\n    /* Open and parse the specified theme. */\n\n    FRESHTheme.prototype.open = function(themeFolder) {\n      var cached, formatsHash, pathInfo, that, themeFile, themeInfo;\n      this.folder = themeFolder;\n      pathInfo = parsePath(themeFolder);\n      formatsHash = {};\n      themeFile = PATH.join(themeFolder, 'theme.json');\n      themeInfo = loadSafeJson(themeFile);\n      if (themeInfo.ex) {\n        throw {\n          fluenterror: themeInfo.ex.operation === 'parse' ? HMSTATUS.parseError : HMSTATUS.readError,\n          inner: themeInfo.ex.inner\n        };\n      }\n      that = this;\n      EXTEND(true, this, themeInfo.json);\n      if (this.inherits) {\n        cached = {};\n        _.each(this.inherits, function(th, key) {\n          var d, themePath, themesFolder;\n          themesFolder = require.resolve('fresh-themes');\n          d = parsePath(themeFolder).dirname;\n          themePath = PATH.join(d, th);\n          cached[th] = cached[th] || new FRESHTheme().open(themePath);\n          return formatsHash[key] = cached[th].getFormat(key);\n        });\n      }\n      formatsHash = _load.call(this, formatsHash);\n      this.formats = formatsHash;\n      this.name = parsePath(this.folder).name;\n      return this;\n    };\n\n\n    /* Determine if the theme supports the specified output format. */\n\n    FRESHTheme.prototype.hasFormat = function(fmt) {\n      return _.has(this.formats, fmt);\n    };\n\n\n    /* Determine if the theme supports the specified output format. */\n\n    FRESHTheme.prototype.getFormat = function(fmt) {\n      return this.formats[fmt];\n    };\n\n    return FRESHTheme;\n\n  })();\n\n\n  /* Load and parse theme source files. */\n\n  _load = function(formatsHash) {\n    var copyOnly, fmts, major, that, tplFolder;\n    that = this;\n    major = false;\n    tplFolder = PATH.join(this.folder, 'src');\n    copyOnly = ['.ttf', '.otf', '.png', '.jpg', '.jpeg', '.pdf'];\n    fmts = READFILES(tplFolder).map(function(absPath) {\n      return _loadOne.call(this, absPath, formatsHash, tplFolder);\n    }, this);\n    this.cssFiles = fmts.filter(function(fmt) {\n      return fmt && (fmt.ext === 'css');\n    });\n    this.cssFiles.forEach(function(cssf) {\n      var idx;\n      idx = _.findIndex(fmts, function(fmt) {\n        return fmt && fmt.pre === cssf.pre && fmt.ext === 'html';\n      });\n      cssf.major = false;\n      if (idx > -1) {\n        fmts[idx].css = cssf.data;\n        return fmts[idx].cssPath = cssf.path;\n      } else {\n        if (that.inherits) {\n          return that.overrides = {\n            file: cssf.path,\n            data: cssf.data\n          };\n        }\n      }\n    });\n    return formatsHash;\n  };\n\n\n  /* Load a single theme file. */\n\n  _loadOne = function(absPath, formatsHash, tplFolder) {\n    var absPathSafe, act, defFormats, idx, isPrimary, obj, outFmt, pathInfo, portion, ref, ref1, reg, res;\n    pathInfo = parsePath(absPath);\n    absPathSafe = absPath.trim().toLowerCase();\n    outFmt = '';\n    act = 'copy';\n    isPrimary = false;\n    if (this.explicit) {\n      outFmt = _.find(Object.keys(this.formats), function(fmtKey) {\n        var fmtVal;\n        fmtVal = this.formats[fmtKey];\n        return _.some(fmtVal.transform, function(fpath) {\n          var absPathB;\n          absPathB = PATH.join(this.folder, fpath).trim().toLowerCase();\n          return absPathB === absPathSafe;\n        }, this);\n      }, this);\n      if (outFmt) {\n        act = 'transform';\n      }\n    }\n    if (!outFmt) {\n      portion = pathInfo.dirname.replace(tplFolder, '');\n      if (portion && portion.trim()) {\n        if (portion[1] === '_') {\n          return;\n        }\n        reg = /^(?:\\/|\\\\)(html|latex|doc|pdf|png|partials)(?:\\/|\\\\)?/ig;\n        res = reg.exec(portion);\n        if (res) {\n          if (res[1] !== 'partials') {\n            outFmt = res[1];\n            if (!this.explicit) {\n              act = 'transform';\n            }\n          } else {\n            this.partials = this.partials || [];\n            this.partials.push({\n              name: pathInfo.name,\n              path: absPath\n            });\n            return null;\n          }\n        }\n      }\n    }\n    if (!outFmt) {\n      idx = pathInfo.name.lastIndexOf('-');\n      outFmt = idx === -1 ? pathInfo.name : pathInfo.name.substr(idx + 1);\n      if (!this.explicit) {\n        act = 'transform';\n      }\n      defFormats = require('./default-formats');\n      isPrimary = _.some(defFormats, function(form) {\n        return form.name === outFmt && pathInfo.extname !== '.css';\n      });\n    }\n    formatsHash[outFmt] = formatsHash[outFmt] || {\n      outFormat: outFmt,\n      files: []\n    };\n    if ((ref = this.formats) != null ? (ref1 = ref[outFmt]) != null ? ref1.symLinks : void 0 : void 0) {\n      formatsHash[outFmt].symLinks = this.formats[outFmt].symLinks;\n    }\n    obj = {\n      action: act,\n      primary: isPrimary,\n      path: absPath,\n      orgPath: PATH.relative(tplFolder, absPath),\n      ext: pathInfo.extname.slice(1),\n      title: friendlyName(outFmt),\n      pre: outFmt,\n      data: FS.readFileSync(absPath, 'utf8'),\n      css: null\n    };\n    formatsHash[outFmt].files.push(obj);\n    return obj;\n  };\n\n\n  /* Return a more friendly name for certain formats. */\n\n  friendlyName = function(val) {\n    var friendly;\n    val = (val && val.trim().toLowerCase()) || '';\n    friendly = {\n      yml: 'yaml',\n      md: 'markdown',\n      txt: 'text'\n    };\n    return friendly[val] || val;\n  };\n\n  module.exports = FRESHTheme;\n\n}).call(this);\n\n//# sourceMappingURL=fresh-theme.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/utils/safe-json-loader.js":"\n/**\nDefinition of the SafeJsonLoader class.\n@module utils/safe-json-loader\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var FS, SyntaxErrorEx;\n\n  FS = require('fs');\n\n  SyntaxErrorEx = require('./syntax-error-ex');\n\n  module.exports = function(file) {\n    var ret, retRaw;\n    ret = {};\n    try {\n      ret.raw = FS.readFileSync(file, 'utf8');\n      ret.json = JSON.parse(ret.raw);\n    } catch (_error) {\n      retRaw = ret.raw && ret.raw.trim();\n      ret.ex = {\n        operation: retRaw ? 'parse' : 'read',\n        inner: SyntaxErrorEx.is(_error) ? new SyntaxErrorEx(_error, retRaw) : _error,\n        file: file\n      };\n    }\n    return ret;\n  };\n\n}).call(this);\n\n//# sourceMappingURL=safe-json-loader.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/utils/syntax-error-ex.js":"\n/**\nDefinition of the SyntaxErrorEx class.\n@module utils/syntax-error-ex\n@license MIT. See LICENSE.md for details.\n */\n\n\n/**\nRepresents a SyntaxError exception with line and column info.\nCollect syntax error information from the provided exception object. The\nJavaScript `SyntaxError` exception isn't interpreted uniformly across environ-\nments, so we reparse on error to grab the line and column.\nSee: http://stackoverflow.com/q/13323356\n@class SyntaxErrorEx\n */\n\n(function() {\n  var SyntaxErrorEx;\n\n  SyntaxErrorEx = (function() {\n    function SyntaxErrorEx(ex, rawData) {\n      var JSONLint, colNum, lineNum, lint, ref;\n      lineNum = null;\n      colNum = null;\n      JSONLint = require('json-lint');\n      lint = JSONLint(rawData, {\n        comments: false\n      });\n      if (lint.error) {\n        ref = [lint.line, lint.character], this.line = ref[0], this.col = ref[1];\n      }\n      if (!lint.error) {\n        JSONLint = require('jsonlint');\n        try {\n          JSONLint.parse(rawData);\n        } catch (_error) {\n          this.line = (/on line (\\d+)/.exec(_error))[1];\n        }\n      }\n    }\n\n    return SyntaxErrorEx;\n\n  })();\n\n  SyntaxErrorEx.is = function(ex) {\n    return ex instanceof SyntaxError;\n  };\n\n  module.exports = SyntaxErrorEx;\n\n}).call(this);\n\n//# sourceMappingURL=syntax-error-ex.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/jrs-theme.js":"\n/**\nDefinition of the JRSTheme class.\n@module core/jrs-theme\n@license MIT. See LICENSE.MD for details.\n */\n\n(function() {\n  var JRSTheme, PATH, _, parsePath, pathExists;\n\n  _ = require('underscore');\n\n  PATH = require('path');\n\n  parsePath = require('parse-filepath');\n\n  pathExists = require('path-exists').sync;\n\n\n  /**\n  The JRSTheme class is a representation of a JSON Resume theme asset.\n  @class JRSTheme\n   */\n\n  JRSTheme = (function() {\n    function JRSTheme() {}\n\n\n    /**\n    Open and parse the specified theme.\n    @method open\n     */\n\n    JRSTheme.prototype.open = function(thFolder) {\n      var pathInfo, pkgJsonPath, thApi, thPkg;\n      this.folder = thFolder;\n      pathInfo = parsePath(thFolder);\n      pkgJsonPath = PATH.join(thFolder, 'package.json');\n      if (pathExists(pkgJsonPath)) {\n        thApi = require(thFolder);\n        thPkg = require(pkgJsonPath);\n        this.name = thPkg.name;\n        this.render = (thApi && thApi.render) || void 0;\n        this.engine = 'jrs';\n        this.formats = {\n          html: {\n            outFormat: 'html',\n            files: [\n              {\n                action: 'transform',\n                render: this.render,\n                primary: true,\n                ext: 'html',\n                css: null\n              }\n            ]\n          },\n          pdf: {\n            outFormat: 'pdf',\n            files: [\n              {\n                action: 'transform',\n                render: this.render,\n                primary: true,\n                ext: 'pdf',\n                css: null\n              }\n            ]\n          }\n        };\n      } else {\n        throw {\n          fluenterror: HACKMYSTATUS.missingPackageJSON\n        };\n      }\n      return this;\n    };\n\n\n    /**\n    Determine if the theme supports the output format.\n    @method hasFormat\n     */\n\n    JRSTheme.prototype.hasFormat = function(fmt) {\n      return _.has(this.formats, fmt);\n    };\n\n\n    /**\n    Return the requested output format.\n    @method getFormat\n     */\n\n    JRSTheme.prototype.getFormat = function(fmt) {\n      return this.formats[fmt];\n    };\n\n    return JRSTheme;\n\n  })();\n\n  module.exports = JRSTheme;\n\n}).call(this);\n\n//# sourceMappingURL=jrs-theme.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/resume-factory.js":"\n/**\nDefinition of the ResumeFactory class.\n@license MIT. See LICENSE.md for details.\n@module core/resume-factory\n */\n\n(function() {\n  var FS, HACKMYSTATUS, HME, ResumeConverter, ResumeFactory, SyntaxErrorEx, _, _parse, chalk;\n\n  FS = require('fs');\n\n  HACKMYSTATUS = require('./status-codes');\n\n  HME = require('./event-codes');\n\n  ResumeConverter = require('fresh-jrs-converter');\n\n  chalk = require('chalk');\n\n  SyntaxErrorEx = require('../utils/syntax-error-ex');\n\n  _ = require('underscore');\n\n  require('string.prototype.startswith');\n\n\n  /**\n  A simple factory class for FRESH and JSON Resumes.\n  @class ResumeFactory\n   */\n\n  ResumeFactory = module.exports = {\n\n    /**\n    Load one or more resumes from disk.\n    \n    @param {Object} opts An options object with settings for the factory as well\n    as passthrough settings for FRESHResume or JRSResume. Structure:\n    \n        {\n          format: 'FRESH',    // Format to open as. ('FRESH', 'JRS', null)\n          objectify: true,    // FRESH/JRSResume or raw JSON?\n          inner: {            // Passthru options for FRESH/JRSResume\n            sort: false\n          }\n        }\n     */\n    load: function(sources, opts, emitter) {\n      return sources.map(function(src) {\n        return this.loadOne(src, opts, emitter);\n      }, this);\n    },\n\n    /** Load a single resume from disk. */\n    loadOne: function(src, opts, emitter) {\n      var ResumeClass, info, isFRESH, json, objectify, orgFormat, rez, toFormat;\n      toFormat = opts.format;\n      objectify = opts.objectify;\n      toFormat && (toFormat = toFormat.toLowerCase().trim());\n      info = _parse(src, opts, emitter);\n      if (info.fluenterror) {\n        return info;\n      }\n      json = info.json;\n      isFRESH = json.meta && json.meta.format && json.meta.format.startsWith('FRESH@');\n      orgFormat = isFRESH ? 'fresh' : 'jrs';\n      if (toFormat && (orgFormat !== toFormat)) {\n        json = ResumeConverter['to' + toFormat.toUpperCase()](json);\n      }\n      rez = null;\n      if (objectify) {\n        ResumeClass = require('../core/' + (toFormat || orgFormat) + '-resume');\n        rez = new ResumeClass().parseJSON(json, opts.inner);\n        rez.i().file = src;\n      }\n      return {\n        file: src,\n        json: info.json,\n        rez: rez\n      };\n    }\n  };\n\n  _parse = function(fileName, opts, eve) {\n    var orgFormat, rawData, ret;\n    rawData = null;\n    try {\n      eve && eve.stat(HME.beforeRead, {\n        file: fileName\n      });\n      rawData = FS.readFileSync(fileName, 'utf8');\n      eve && eve.stat(HME.afterRead, {\n        file: fileName,\n        data: rawData\n      });\n      eve && eve.stat(HME.beforeParse, {\n        data: rawData\n      });\n      ret = {\n        json: JSON.parse(rawData)\n      };\n      orgFormat = ret.json.meta && ret.json.meta.format && ret.json.meta.format.startsWith('FRESH@') ? 'fresh' : 'jrs';\n      eve && eve.stat(HME.afterParse, {\n        file: fileName,\n        data: ret.json,\n        fmt: orgFormat\n      });\n      return ret;\n    } catch (_error) {\n      return {\n        fluenterror: rawData ? HACKMYSTATUS.parseError : HACKMYSTATUS.readError,\n        inner: _error,\n        raw: rawData,\n        file: fileName\n      };\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=resume-factory.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/core/default-formats.js":"\n/*\nEvent code definitions.\n@module core/default-formats\n@license MIT. See LICENSE.md for details.\n */\n\n\n/** Supported resume formats. */\n\n(function() {\n  module.exports = [\n    {\n      name: 'html',\n      ext: 'html',\n      gen: new (require('../generators/html-generator'))()\n    }, {\n      name: 'txt',\n      ext: 'txt',\n      gen: new (require('../generators/text-generator'))()\n    }, {\n      name: 'doc',\n      ext: 'doc',\n      fmt: 'xml',\n      gen: new (require('../generators/word-generator'))()\n    }, {\n      name: 'pdf',\n      ext: 'pdf',\n      fmt: 'html',\n      is: false,\n      gen: new (require('../generators/html-pdf-cli-generator'))()\n    }, {\n      name: 'png',\n      ext: 'png',\n      fmt: 'html',\n      is: false,\n      gen: new (require('../generators/html-png-generator'))()\n    }, {\n      name: 'md',\n      ext: 'md',\n      fmt: 'txt',\n      gen: new (require('../generators/markdown-generator'))()\n    }, {\n      name: 'json',\n      ext: 'json',\n      gen: new (require('../generators/json-generator'))()\n    }, {\n      name: 'yml',\n      ext: 'yml',\n      fmt: 'yml',\n      gen: new (require('../generators/json-yaml-generator'))()\n    }, {\n      name: 'latex',\n      ext: 'tex',\n      fmt: 'latex',\n      gen: new (require('../generators/latex-generator'))()\n    }\n  ];\n\n}).call(this);\n\n//# sourceMappingURL=default-formats.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/html-generator.js":"\n/**\nDefinition of the HTMLGenerator class.\n@module generators/html-generator\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var FS, HTML, HtmlGenerator, PATH, TemplateGenerator,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  TemplateGenerator = require('./template-generator');\n\n  FS = require('fs-extra');\n\n  HTML = require('html');\n\n  PATH = require('path');\n\n  require('string.prototype.endswith');\n\n  module.exports = HtmlGenerator = (function(superClass) {\n    extend(HtmlGenerator, superClass);\n\n    function HtmlGenerator() {\n      HtmlGenerator.__super__.constructor.call(this, 'html');\n    }\n\n\n    /**\n    Copy satellite CSS files to the destination and optionally pretty-print\n    the HTML resume prior to saving.\n     */\n\n    HtmlGenerator.prototype.onBeforeSave = function(info) {\n      if (info.outputFile.endsWith('.css')) {\n        return info.mk;\n      }\n      if (this.opts.prettify) {\n        return HTML.prettyPrint(info.mk, this.opts.prettify);\n      } else {\n        return info.mk;\n      }\n    };\n\n    return HtmlGenerator;\n\n  })(TemplateGenerator);\n\n}).call(this);\n\n//# sourceMappingURL=html-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/template-generator.js":"\n/**\nDefinition of the TemplateGenerator class. TODO: Refactor\n@module generators/template-generator\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var BaseGenerator, EXTEND, FRESHTheme, FS, JRSTheme, MD, MKDIRP, PATH, TemplateGenerator, XML, _, _defaultOpts, _reg, createSymLinks, freeze, parsePath, unfreeze,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  FS = require('fs-extra');\n\n  _ = require('underscore');\n\n  MD = require('marked');\n\n  XML = require('xml-escape');\n\n  PATH = require('path');\n\n  parsePath = require('parse-filepath');\n\n  MKDIRP = require('mkdirp');\n\n  BaseGenerator = require('./base-generator');\n\n  EXTEND = require('extend');\n\n  FRESHTheme = require('../core/fresh-theme');\n\n  JRSTheme = require('../core/jrs-theme');\n\n\n  /**\n  TemplateGenerator performs resume generation via local Handlebar or Underscore\n  style template expansion and is appropriate for text-based formats like HTML,\n  plain text, and XML versions of Microsoft Word, Excel, and OpenOffice.\n  @class TemplateGenerator\n   */\n\n  module.exports = TemplateGenerator = (function(superClass) {\n    extend(TemplateGenerator, superClass);\n\n\n    /** Constructor. Set the output format and template format for this\n    generator. Will usually be called by a derived generator such as\n    HTMLGenerator or MarkdownGenerator.\n     */\n\n    function TemplateGenerator(outputFormat, templateFormat, cssFile) {\n      TemplateGenerator.__super__.constructor.call(this, outputFormat);\n      this.tplFormat = templateFormat || outputFormat;\n      return;\n    }\n\n\n    /** Generate a resume using string-based inputs and outputs without touching\n    the filesystem.\n    @method invoke\n    @param rez A FreshResume object.\n    @param opts Generator options.\n    @returns {Array} An array of objects representing the generated output\n    files.\n     */\n\n    TemplateGenerator.prototype.invoke = function(rez, opts) {\n      var curFmt, results;\n      opts = opts ? (this.opts = EXTEND(true, {}, _defaultOpts, opts)) : this.opts;\n      curFmt = opts.themeObj.getFormat(this.format);\n      curFmt.files = _.sortBy(curFmt.files, function(fi) {\n        return fi.ext !== 'css';\n      });\n      results = curFmt.files.map(function(tplInfo, idx) {\n        var trx;\n        if (tplInfo.action === 'transform') {\n          trx = this.transform(rez, tplInfo.data, this.format, opts, opts.themeObj, curFmt);\n          if (tplInfo.ext === 'css') {\n            curFmt.files[idx].data = trx;\n          } else {\n            tplInfo.ext === 'html';\n          }\n        } else {\n\n        }\n        if (typeof opts.onTransform === \"function\") {\n          opts.onTransform(tplInfo);\n        }\n        return {\n          info: tplInfo,\n          data: trx\n        };\n      }, this);\n      return {\n        files: results\n      };\n    };\n\n\n    /** Generate a resume using file-based inputs and outputs. Requires access\n    to the local filesystem.\n    @method generate\n    @param rez A FreshResume object.\n    @param f Full path to the output resume file to generate.\n    @param opts Generator options.\n     */\n\n    TemplateGenerator.prototype.generate = function(rez, f, opts) {\n      var curFmt, genInfo, outFolder;\n      this.opts = EXTEND(true, {}, _defaultOpts, opts);\n      genInfo = this.invoke(rez, null);\n      outFolder = parsePath(f).dirname;\n      curFmt = opts.themeObj.getFormat(this.format);\n      genInfo.files.forEach(function(file) {\n        var thisFilePath;\n        file.info.orgPath = file.info.orgPath || '';\n        thisFilePath = file.info.primary ? f : PATH.join(outFolder, file.info.orgPath);\n        if (file.info.action !== 'copy' && this.onBeforeSave) {\n          file.data = this.onBeforeSave({\n            theme: opts.themeObj,\n            outputFile: thisFilePath,\n            mk: file.data,\n            opts: this.opts,\n            ext: file.info.ext\n          });\n          if (!file.data) {\n            return;\n          }\n        }\n        if (typeof opts.beforeWrite === \"function\") {\n          opts.beforeWrite(thisFilePath);\n        }\n        MKDIRP.sync(PATH.dirname(thisFilePath));\n        if (file.info.action !== 'copy') {\n          FS.writeFileSync(thisFilePath, file.data, {\n            encoding: 'utf8',\n            flags: 'w'\n          });\n        } else {\n          FS.copySync(file.info.path, thisFilePath);\n        }\n        if (typeof opts.afterWrite === \"function\") {\n          opts.afterWrite(thisFilePath);\n        }\n        if (this.onAfterSave) {\n          return this.onAfterSave({\n            outputFile: fileName,\n            mk: file.data,\n            opts: this.opts\n          });\n        }\n      }, this);\n      createSymLinks(curFmt, outFolder);\n      return genInfo;\n    };\n\n\n    /** Perform a single resume resume transformation using string-based inputs\n    and outputs without touching the local file system.\n    @param json A FRESH or JRS resume object.\n    @param jst The stringified template data\n    @param format The format name, such as \"html\" or \"latex\"\n    @param cssInfo Needs to be refactored.\n    @param opts Options and passthrough data.\n     */\n\n    TemplateGenerator.prototype.transform = function(json, jst, format, opts, theme, curFmt) {\n      var eng, result;\n      if (this.opts.freezeBreaks) {\n        jst = freeze(jst);\n      }\n      eng = require('../renderers/' + theme.engine + '-generator');\n      result = eng.generate(json, jst, format, curFmt, opts, theme);\n      if (this.opts.freezeBreaks) {\n        result = unfreeze(result);\n      }\n      return result;\n    };\n\n    return TemplateGenerator;\n\n  })(BaseGenerator);\n\n  createSymLinks = function(curFmt, outFolder) {\n    if (curFmt.symLinks) {\n      Object.keys(curFmt.symLinks).forEach(function(loc) {\n        var absLoc, absTarg, succeeded, type;\n        absLoc = PATH.join(outFolder, loc);\n        absTarg = PATH.join(PATH.dirname(absLoc), curFmt.symLinks[loc]);\n        type = parsePath(absLoc).extname ? 'file' : 'junction';\n        try {\n          return FS.symlinkSync(absTarg, absLoc, type);\n        } catch (_error) {\n          succeeded = false;\n          if (_error.code === 'EEXIST') {\n            FS.unlinkSync(absLoc);\n            try {\n              FS.symlinkSync(absTarg, absLoc, type);\n              succeeded = true;\n            } catch (_error) {}\n          }\n          if (!succeeded) {\n            throw ex;\n          }\n        }\n      });\n    }\n  };\n\n\n  /** Freeze newlines for protection against errant JST parsers. */\n\n  freeze = function(markup) {\n    markup.replace(_reg.regN, _defaultOpts.nSym);\n    return markup.replace(_reg.regR, _defaultOpts.rSym);\n  };\n\n\n  /** Unfreeze newlines when the coast is clear. */\n\n  unfreeze = function(markup) {\n    markup.replace(_reg.regSymR, '\\r');\n    return markup.replace(_reg.regSymN, '\\n');\n  };\n\n\n  /** Default template generator options. */\n\n  _defaultOpts = {\n    engine: 'underscore',\n    keepBreaks: true,\n    freezeBreaks: false,\n    nSym: '&newl;',\n    rSym: '&retn;',\n    template: {\n      interpolate: /\\{\\{(.+?)\\}\\}/g,\n      escape: /\\{\\{\\=(.+?)\\}\\}/g,\n      evaluate: /\\{\\%(.+?)\\%\\}/g,\n      comment: /\\{\\#(.+?)\\#\\}/g\n    },\n    filters: {\n      out: function(txt) {\n        return txt;\n      },\n      raw: function(txt) {\n        return txt;\n      },\n      xml: function(txt) {\n        return XML(txt);\n      },\n      md: function(txt) {\n        return MD(txt || '');\n      },\n      mdin: function(txt) {\n        return MD(txt || '').replace(/^\\s*<p>|<\\/p>\\s*$/gi, '');\n      },\n      lower: function(txt) {\n        return txt.toLowerCase();\n      },\n      link: function(name, url) {\n        if (url) {\n          return '<a href=\"' + url + '\">' + name + '</a>';\n        } else {\n          return name;\n        }\n      }\n    },\n    prettify: {\n      indent_size: 2,\n      unformatted: ['em', 'strong', 'a'],\n      max_char: 80\n    }\n  };\n\n\n  /** Regexes for linebreak preservation. */\n\n  _reg = {\n    regN: new RegExp('\\n', 'g'),\n    regR: new RegExp('\\r', 'g'),\n    regSymN: new RegExp(_defaultOpts.nSym, 'g'),\n    regSymR: new RegExp(_defaultOpts.rSym, 'g')\n  };\n\n}).call(this);\n\n//# sourceMappingURL=template-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/base-generator.js":"\n/**\nDefinition of the BaseGenerator class.\n@module generators/base-generator\n@license MIT. See LICENSE.md for details.\n */\n\n\n/**\nThe BaseGenerator class is the root of the generator hierarchy. Functionality\ncommon to ALL generators lives here.\n */\n\n(function() {\n  var BaseGenerator;\n\n  module.exports = BaseGenerator = (function() {\n\n    /** Base-class initialize. */\n    function BaseGenerator(format) {\n      this.format = format;\n    }\n\n\n    /** Status codes. */\n\n    BaseGenerator.prototype.codes = require('../core/status-codes');\n\n\n    /** Generator options. */\n\n    BaseGenerator.prototype.opts = {};\n\n    return BaseGenerator;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=base-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/text-generator.js":"\n/**\nDefinition of the TextGenerator class.\n@module generators/text-generator\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var TemplateGenerator, TextGenerator,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  TemplateGenerator = require('./template-generator');\n\n\n  /**\n  The TextGenerator generates a plain-text resume via the TemplateGenerator.\n   */\n\n  module.exports = TextGenerator = (function(superClass) {\n    extend(TextGenerator, superClass);\n\n    function TextGenerator() {\n      TextGenerator.__super__.constructor.call(this, 'txt');\n    }\n\n    return TextGenerator;\n\n  })(TemplateGenerator);\n\n}).call(this);\n\n//# sourceMappingURL=text-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/word-generator.js":"\n/*\nDefinition of the WordGenerator class.\n@module generators/word-generator\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var TemplateGenerator, WordGenerator,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  TemplateGenerator = require('./template-generator');\n\n  module.exports = WordGenerator = (function(superClass) {\n    extend(WordGenerator, superClass);\n\n    function WordGenerator() {\n      WordGenerator.__super__.constructor.call(this, 'doc', 'xml');\n    }\n\n    return WordGenerator;\n\n  })(TemplateGenerator);\n\n}).call(this);\n\n//# sourceMappingURL=word-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/html-pdf-cli-generator.js":"\n/**\nDefinition of the HtmlPdfCLIGenerator class.\n@module generators/html-pdf-generator.js\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var FS, HMSTATUS, HtmlPdfCLIGenerator, PATH, SLASH, SPAWN, TemplateGenerator, _, engines,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  TemplateGenerator = require('./template-generator');\n\n  FS = require('fs-extra');\n\n  PATH = require('path');\n\n  SLASH = require('slash');\n\n  _ = require('underscore');\n\n  HMSTATUS = require('../core/status-codes');\n\n  SPAWN = require('../utils/safe-spawn');\n\n\n  /**\n  An HTML-driven PDF resume generator for HackMyResume. Talks to Phantom,\n  wkhtmltopdf, and other PDF engines over a CLI (command-line interface).\n  If an engine isn't installed for a particular platform, error out gracefully.\n   */\n\n  module.exports = HtmlPdfCLIGenerator = (function(superClass) {\n    extend(HtmlPdfCLIGenerator, superClass);\n\n    function HtmlPdfCLIGenerator() {\n      HtmlPdfCLIGenerator.__super__.constructor.call(this, 'pdf', 'html');\n    }\n\n\n    /** Generate the binary PDF. */\n\n    HtmlPdfCLIGenerator.prototype.onBeforeSave = function(info) {\n      var safe_eng;\n      if (info.ext !== 'html' && info.ext !== 'pdf') {\n        return info.mk;\n      }\n      safe_eng = info.opts.pdf || 'wkhtmltopdf';\n      if (safe_eng === 'phantom') {\n        safe_eng = 'phantomjs';\n      }\n      if (_.has(engines, safe_eng)) {\n        this.errHandler = info.opts.errHandler;\n        engines[safe_eng].call(this, info.mk, info.outputFile, this.onError);\n        return null;\n      }\n    };\n\n\n    /* Low-level error callback for spawn(). May be called after HMR process\n    termination, so object references may not be valid here. That's okay; if\n    the references are invalid, the error was already logged. We could use\n    spawn-watch here but that causes issues on legacy Node.js.\n     */\n\n    HtmlPdfCLIGenerator.prototype.onError = function(ex, param) {\n      var ref;\n      if ((ref = param.errHandler) != null) {\n        if (typeof ref.err === \"function\") {\n          ref.err(HMSTATUS.pdfGeneration, ex);\n        }\n      }\n    };\n\n    return HtmlPdfCLIGenerator;\n\n  })(TemplateGenerator);\n\n  engines = {\n\n    /**\n    Generate a PDF from HTML using wkhtmltopdf's CLI interface.\n    Spawns a child process with `wkhtmltopdf <source> <target>`. wkhtmltopdf\n    must be installed and path-accessible.\n    TODO: If HTML generation has run, reuse that output\n    TODO: Local web server to ease wkhtmltopdf rendering\n     */\n    wkhtmltopdf: function(markup, fOut, on_error) {\n      var tempFile;\n      tempFile = fOut.replace(/\\.pdf$/i, '.pdf.html');\n      FS.writeFileSync(tempFile, markup, 'utf8');\n      SPAWN('wkhtmltopdf', [tempFile, fOut], false, on_error, this);\n    },\n\n    /**\n    Generate a PDF from HTML using Phantom's CLI interface.\n    Spawns a child process with `phantomjs <script> <source> <target>`. Phantom\n    must be installed and path-accessible.\n    TODO: If HTML generation has run, reuse that output\n    TODO: Local web server to ease Phantom rendering\n     */\n    phantomjs: function(markup, fOut, on_error) {\n      var destPath, scriptPath, sourcePath, tempFile;\n      tempFile = fOut.replace(/\\.pdf$/i, '.pdf.html');\n      FS.writeFileSync(tempFile, markup, 'utf8');\n      scriptPath = PATH.relative(process.cwd(), PATH.resolve(__dirname, '../utils/rasterize.js'));\n      scriptPath = SLASH(scriptPath);\n      sourcePath = SLASH(PATH.relative(process.cwd(), tempFile));\n      destPath = SLASH(PATH.relative(process.cwd(), fOut));\n      SPAWN('phantomjs', [scriptPath, sourcePath, destPath], false, on_error, this);\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=html-pdf-cli-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/utils/safe-spawn.js":"\n/**\nSafe spawn utility for HackMyResume / FluentCV.\n@module utils/safe-spawn\n@license MIT. See LICENSE.md for details.\n */\n\n\n/** Safely spawn a process synchronously or asynchronously without throwing an\nexception\n */\n\n(function() {\n  module.exports = function(cmd, args, isSync, callback, param) {\n    var info, spawn;\n    try {\n      spawn = require('child_process')[isSync ? 'spawnSync' : 'spawn'];\n      info = spawn(cmd, args);\n      if (!isSync) {\n        info.on('error', function(err) {\n          if (typeof callback === \"function\") {\n            callback(err, param);\n          }\n        });\n      } else {\n        if (info.error) {\n          if (typeof callback === \"function\") {\n            callback(info.error, param);\n          }\n          return {\n            cmd: cmd,\n            inner: info.error\n          };\n        }\n      }\n    } catch (_error) {\n      if (typeof callback === \"function\") {\n        callback(_error, param);\n      }\n      return _error;\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=safe-spawn.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/html-png-generator.js":"\n/**\nDefinition of the HtmlPngGenerator class.\n@module generators/html-png-generator\n@license MIT. See LICENSE.MD for details.\n */\n\n(function() {\n  var FS, HTML, HtmlPngGenerator, PATH, SLASH, SPAWN, TemplateGenerator, phantom,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  TemplateGenerator = require('./template-generator');\n\n  FS = require('fs-extra');\n\n  HTML = require('html');\n\n  SLASH = require('slash');\n\n  SPAWN = require('../utils/safe-spawn');\n\n  PATH = require('path');\n\n\n  /**\n  An HTML-based PNG resume generator for HackMyResume.\n   */\n\n  module.exports = HtmlPngGenerator = (function(superClass) {\n    extend(HtmlPngGenerator, superClass);\n\n    function HtmlPngGenerator() {\n      HtmlPngGenerator.__super__.constructor.call(this, 'png', 'html');\n    }\n\n    HtmlPngGenerator.prototype.invoke = function(rez, themeMarkup, cssInfo, opts) {};\n\n    HtmlPngGenerator.prototype.generate = function(rez, f, opts) {\n      var htmlFile, htmlResults;\n      htmlResults = opts.targets.filter(function(t) {\n        return t.fmt.outFormat === 'html';\n      });\n      htmlFile = htmlResults[0].final.files.filter(function(fl) {\n        return fl.info.ext === 'html';\n      });\n      phantom(htmlFile[0].data, f);\n    };\n\n    return HtmlPngGenerator;\n\n  })(TemplateGenerator);\n\n\n  /**\n  Generate a PDF from HTML using Phantom's CLI interface.\n  Spawns a child process with `phantomjs <script> <source> <target>`. Phantom\n  must be installed and path-accessible.\n  TODO: If HTML generation has run, reuse that output\n  TODO: Local web server to ease Phantom rendering\n   */\n\n  phantom = function(markup, fOut) {\n    var destPath, info, scriptPath, sourcePath, tempFile;\n    tempFile = fOut.replace(/\\.png$/i, '.png.html');\n    FS.writeFileSync(tempFile, markup, 'utf8');\n    scriptPath = SLASH(PATH.relative(process.cwd(), PATH.resolve(__dirname, '../utils/rasterize.js')));\n    sourcePath = SLASH(PATH.relative(process.cwd(), tempFile));\n    destPath = SLASH(PATH.relative(process.cwd(), fOut));\n    info = SPAWN('phantomjs', [scriptPath, sourcePath, destPath]);\n  };\n\n}).call(this);\n\n//# sourceMappingURL=html-png-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/markdown-generator.js":"\n/**\nDefinition of the MarkdownGenerator class.\n@module generators/markdown-generator\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var MarkdownGenerator, TemplateGenerator,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  TemplateGenerator = require('./template-generator');\n\n\n  /**\n  MarkdownGenerator generates a Markdown-formatted resume via TemplateGenerator.\n   */\n\n  module.exports = MarkdownGenerator = (function(superClass) {\n    extend(MarkdownGenerator, superClass);\n\n    function MarkdownGenerator() {\n      MarkdownGenerator.__super__.constructor.call(this, 'md', 'txt');\n    }\n\n    return MarkdownGenerator;\n\n  })(TemplateGenerator);\n\n}).call(this);\n\n//# sourceMappingURL=markdown-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/json-generator.js":"\n/**\nDefinition of the JsonGenerator class.\n@module generators/json-generator\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var BaseGenerator, FJCV, FS, JsonGenerator, _,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseGenerator = require('./base-generator');\n\n  FS = require('fs');\n\n  _ = require('underscore');\n\n  FJCV = require('fresh-jrs-converter');\n\n\n  /** The JsonGenerator generates a FRESH or JRS resume as an output. */\n\n  module.exports = JsonGenerator = (function(superClass) {\n    extend(JsonGenerator, superClass);\n\n    function JsonGenerator() {\n      JsonGenerator.__super__.constructor.call(this, 'json');\n    }\n\n    JsonGenerator.prototype.invoke = function(rez) {\n      var altRez;\n      altRez = FJCV['to' + (rez.format() === 'FRESH' ? 'JRS' : 'FRESH')](rez);\n      return altRez = FJCV.toSTRING(altRez);\n    };\n\n    JsonGenerator.prototype.generate = function(rez, f) {\n      FS.writeFileSync(f, this.invoke(rez), 'utf8');\n    };\n\n    return JsonGenerator;\n\n  })(BaseGenerator);\n\n}).call(this);\n\n//# sourceMappingURL=json-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/json-yaml-generator.js":"\n/**\nDefinition of the JsonYamlGenerator class.\n@module generators/json-yaml-generator\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var BaseGenerator, FS, JsonYamlGenerator, YAML,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseGenerator = require('./base-generator');\n\n  FS = require('fs');\n\n  YAML = require('yamljs');\n\n\n  /**\n  JsonYamlGenerator takes a JSON resume object and translates it directly to\n  JSON without a template, producing an equivalent YAML-formatted resume. See\n  also YamlGenerator (yaml-generator.js).\n   */\n\n  module.exports = JsonYamlGenerator = (function(superClass) {\n    extend(JsonYamlGenerator, superClass);\n\n    function JsonYamlGenerator() {\n      JsonYamlGenerator.__super__.constructor.call(this, 'yml');\n    }\n\n    JsonYamlGenerator.prototype.invoke = function(rez, themeMarkup, cssInfo, opts) {\n      return YAML.stringify(JSON.parse(rez.stringify()), Infinity, 2);\n    };\n\n    JsonYamlGenerator.prototype.generate = function(rez, f, opts) {\n      var data;\n      data = YAML.stringify(JSON.parse(rez.stringify()), Infinity, 2);\n      FS.writeFileSync(f, data, 'utf8');\n      return data;\n    };\n\n    return JsonYamlGenerator;\n\n  })(BaseGenerator);\n\n}).call(this);\n\n//# sourceMappingURL=json-yaml-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/latex-generator.js":"\n/**\nDefinition of the LaTeXGenerator class.\n@module generators/latex-generator\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var LaTeXGenerator, TemplateGenerator,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  TemplateGenerator = require('./template-generator');\n\n\n  /**\n  LaTeXGenerator generates a LaTeX resume via TemplateGenerator.\n   */\n\n  module.exports = LaTeXGenerator = (function(superClass) {\n    extend(LaTeXGenerator, superClass);\n\n    function LaTeXGenerator() {\n      LaTeXGenerator.__super__.constructor.call(this, 'latex', 'tex');\n    }\n\n    return LaTeXGenerator;\n\n  })(TemplateGenerator);\n\n}).call(this);\n\n//# sourceMappingURL=latex-generator.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/verbs/verb.js":"\n/**\nDefinition of the Verb class.\n@module verbs/verb\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var EVENTS, HMEVENT, Promise, Verb;\n\n  EVENTS = require('events');\n\n  HMEVENT = require('../core/event-codes');\n\n  Promise = require('pinkie-promise');\n\n\n  /**\n  An abstract invokable verb.\n  Provides base class functionality for verbs. Provide common services such as\n  error handling, event management, and promise support.\n  @class Verb\n   */\n\n  module.exports = Verb = (function() {\n\n    /** Constructor. Automatically called at creation. */\n    function Verb(moniker, workhorse) {\n      this.moniker = moniker;\n      this.workhorse = workhorse;\n      this.emitter = new EVENTS.EventEmitter();\n      return;\n    }\n\n\n    /** Invoke the command. */\n\n    Verb.prototype.invoke = function() {\n      var argsArray, that;\n      this.stat(HMEVENT.begin, {\n        cmd: this.moniker\n      });\n      argsArray = Array.prototype.slice.call(arguments);\n      that = this;\n      return this.promise = new Promise(function(res, rej) {\n        that.resolve = res;\n        that.reject = rej;\n        that.workhorse.apply(that, argsArray);\n      });\n    };\n\n\n    /** Forward subscriptions to the event emitter. */\n\n    Verb.prototype.on = function() {\n      return this.emitter.on.apply(this.emitter, arguments);\n    };\n\n\n    /** Fire an arbitrary event, scoped to \"hmr:\". */\n\n    Verb.prototype.fire = function(evtName, payload) {\n      payload = payload || {};\n      payload.cmd = this.moniker;\n      this.emitter.emit('hmr:' + evtName, payload);\n      return true;\n    };\n\n\n    /** Handle an error condition. */\n\n    Verb.prototype.err = function(errorCode, payload, hot) {\n      payload = payload || {};\n      payload.sub = payload.fluenterror = errorCode;\n      payload[\"throw\"] = hot;\n      this.setError(errorCode, payload);\n      if (payload.quit) {\n        this.reject(errorCode);\n      }\n      this.fire('error', payload);\n      if (hot) {\n        throw payload;\n      }\n      return true;\n    };\n\n\n    /** Fire the 'hmr:status' error event. */\n\n    Verb.prototype.stat = function(subEvent, payload) {\n      payload = payload || {};\n      payload.sub = subEvent;\n      this.fire('status', payload);\n      return true;\n    };\n\n\n    /** Has an error occurred during this verb invocation? */\n\n    Verb.prototype.hasError = function() {\n      return this.errorCode || this.errorObj;\n    };\n\n\n    /** Associate error info with the invocation. */\n\n    Verb.prototype.setError = function(code, obj) {\n      this.errorCode = code;\n      this.errorObj = obj;\n    };\n\n    return Verb;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=verb.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/verbs/analyze.js":"\n/**\nImplementation of the 'analyze' verb for HackMyResume.\n@module verbs/analyze\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var AnalyzeVerb, HMEVENT, HMSTATUS, MKDIRP, PATH, ResumeFactory, Verb, _, _analyze, _analyzeOne, _loadInspectors, chalk,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  MKDIRP = require('mkdirp');\n\n  PATH = require('path');\n\n  HMEVENT = require('../core/event-codes');\n\n  HMSTATUS = require('../core/status-codes');\n\n  _ = require('underscore');\n\n  ResumeFactory = require('../core/resume-factory');\n\n  Verb = require('../verbs/verb');\n\n  chalk = require('chalk');\n\n\n  /** An invokable resume analysis command. */\n\n  module.exports = AnalyzeVerb = (function(superClass) {\n    extend(AnalyzeVerb, superClass);\n\n    function AnalyzeVerb() {\n      AnalyzeVerb.__super__.constructor.call(this, 'analyze', _analyze);\n    }\n\n    return AnalyzeVerb;\n\n  })(Verb);\n\n\n  /** Private workhorse for the 'analyze' command. */\n\n  _analyze = function(sources, dst, opts) {\n    var nlzrs, results;\n    if (!sources || !sources.length) {\n      this.err(HMSTATUS.resumeNotFound, {\n        quit: true\n      });\n      return null;\n    }\n    nlzrs = _loadInspectors();\n    results = _.map(sources, function(src) {\n      var r;\n      r = ResumeFactory.loadOne(src, {\n        format: 'FRESH',\n        objectify: true\n      }, this);\n      if (opts.assert && this.hasError()) {\n        return {};\n      }\n      if (r.fluenterror) {\n        r.quit = opts.assert;\n        this.err(r.fluenterror, r);\n        return r;\n      } else {\n        return _analyzeOne.call(this, r, nlzrs, opts);\n      }\n    }, this);\n    if (this.hasError() && !opts.assert) {\n      this.reject(this.errorCode);\n    } else if (!this.hasError()) {\n      this.resolve(results);\n    }\n    return results;\n  };\n\n\n  /** Analyze a single resume. */\n\n  _analyzeOne = function(resumeObject, nlzrs, opts) {\n    var info, rez, safeFormat;\n    rez = resumeObject.rez;\n    safeFormat = rez.meta && rez.meta.format && rez.meta.format.startsWith('FRESH') ? 'FRESH' : 'JRS';\n    this.stat(HMEVENT.beforeAnalyze, {\n      fmt: safeFormat,\n      file: resumeObject.file\n    });\n    info = _.mapObject(nlzrs, function(val, key) {\n      return val.run(rez);\n    });\n    this.stat(HMEVENT.afterAnalyze, {\n      info: info\n    });\n    return info;\n  };\n\n  _loadInspectors = function() {\n    return {\n      totals: require('../inspectors/totals-inspector'),\n      coverage: require('../inspectors/gap-inspector'),\n      keywords: require('../inspectors/keyword-inspector')\n    };\n  };\n\n}).call(this);\n\n//# sourceMappingURL=analyze.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/verbs/validate.js":"\n/**\nImplementation of the 'validate' verb for HackMyResume.\n@module verbs/validate\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var FS, HMEVENT, HMSTATUS, ResumeFactory, SyntaxErrorEx, ValidateVerb, Verb, _, _validate, _validateOne, chalk, safeLoadJSON,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  FS = require('fs');\n\n  ResumeFactory = require('../core/resume-factory');\n\n  SyntaxErrorEx = require('../utils/syntax-error-ex');\n\n  chalk = require('chalk');\n\n  Verb = require('../verbs/verb');\n\n  HMSTATUS = require('../core/status-codes');\n\n  HMEVENT = require('../core/event-codes');\n\n  _ = require('underscore');\n\n  safeLoadJSON = require('../utils/safe-json-loader');\n\n\n  /** An invokable resume validation command. */\n\n  module.exports = ValidateVerb = (function(superClass) {\n    extend(ValidateVerb, superClass);\n\n    function ValidateVerb() {\n      ValidateVerb.__super__.constructor.call(this, 'validate', _validate);\n    }\n\n    return ValidateVerb;\n\n  })(Verb);\n\n  _validate = function(sources, unused, opts) {\n    var results, schemas, validator;\n    if (!sources || !sources.length) {\n      this.err(HMSTATUS.resumeNotFoundAlt, {\n        quit: true\n      });\n      return null;\n    }\n    validator = require('is-my-json-valid');\n    schemas = {\n      fresh: require('fresca'),\n      jars: require('../core/resume.json')\n    };\n    results = _.map(sources, function(t) {\n      var r;\n      r = _validateOne.call(this, t, validator, schemas, opts);\n      if (r.error) {\n        this.err(r.error.fluenterror, r.error);\n      }\n      return r;\n    }, this);\n    if (this.hasError() && !opts.assert) {\n      this.reject(this.errorCode);\n    } else if (!this.hasError()) {\n      this.resolve(results);\n    }\n    return results;\n  };\n\n\n  /**\n  Validate a single resume.\n  @returns {\n    file: <fileName>,\n    isValid: <validFlag>,\n    status: <validationStatus>,\n    violations: <validationErrors>,\n    schema: <schemaType>,\n    error: <errorObject>\n  }\n   */\n\n  _validateOne = function(t, validator, schemas, opts) {\n    var errCode, obj, ret, validate;\n    ret = {\n      file: t,\n      isValid: false,\n      status: 'unknown',\n      schema: '-----'\n    };\n    try {\n      obj = safeLoadJSON(t);\n      if (!obj.ex) {\n        if (obj.json.basics) {\n          ret.schema = 'jars';\n        } else {\n          ret.schema = 'fresh';\n        }\n        validate = validator(schemas[ret.schema], {\n          formats: {\n            date: /^\\d{4}(?:-(?:0[0-9]{1}|1[0-2]{1})(?:-[0-9]{2})?)?$/\n          }\n        });\n        ret.isValid = validate(obj.json);\n        ret.status = ret.isValid ? 'valid' : 'invalid';\n        if (!ret.isValid) {\n          ret.violations = validate.errors;\n        }\n      } else {\n        if (obj.ex.operation === 'parse') {\n          errCode = HMSTATUS.parseError;\n          ret.status = 'broken';\n        } else {\n          errCode = HMSTATUS.readError;\n          ret.status = 'missing';\n        }\n        ret.error = {\n          fluenterror: errCode,\n          inner: obj.ex.inner,\n          quiet: errCode === HMSTATUS.readError\n        };\n      }\n    } catch (_error) {\n      ret.error = {\n        fluenterror: HMSTATUS.validateError,\n        inner: _error\n      };\n    }\n    this.stat(HMEVENT.afterValidate, ret);\n    return ret;\n  };\n\n}).call(this);\n\n//# sourceMappingURL=validate.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/verbs/convert.js":"\n/**\nImplementation of the 'convert' verb for HackMyResume.\n@module verbs/convert\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var ConvertVerb, HMEVENT, HMSTATUS, ResumeFactory, Verb, _, _convert, _convertOne, chalk,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  ResumeFactory = require('../core/resume-factory');\n\n  chalk = require('chalk');\n\n  Verb = require('../verbs/verb');\n\n  HMSTATUS = require('../core/status-codes');\n\n  _ = require('underscore');\n\n  HMEVENT = require('../core/event-codes');\n\n  module.exports = ConvertVerb = (function(superClass) {\n    extend(ConvertVerb, superClass);\n\n    function ConvertVerb() {\n      ConvertVerb.__super__.constructor.call(this, 'convert', _convert);\n    }\n\n    return ConvertVerb;\n\n  })(Verb);\n\n\n  /** Private workhorse method. Convert 0..N resumes between FRESH and JRS\n  formats.\n   */\n\n  _convert = function(srcs, dst, opts) {\n    var results;\n    if (!srcs || !srcs.length) {\n      this.err(HMSTATUS.resumeNotFound, {\n        quit: true\n      });\n      return null;\n    }\n    if (!dst || !dst.length) {\n      if (srcs.length === 1) {\n        this.err(HMSTATUS.inputOutputParity, {\n          quit: true\n        });\n      } else if (srcs.length === 2) {\n        dst = dst || [];\n        dst.push(srcs.pop());\n      } else {\n        this.err(HMSTATUS.inputOutputParity, {\n          quit: true\n        });\n      }\n    }\n    if (srcs && dst && srcs.length && dst.length && srcs.length !== dst.length) {\n      this.err(HMSTATUS.inputOutputParity, {\n        quit: true\n      });\n    }\n    results = _.map(srcs, function(src, idx) {\n      var r;\n      if (opts.assert && this.hasError()) {\n        return {};\n      }\n      r = _convertOne.call(this, src, dst, idx);\n      if (r.fluenterror) {\n        r.quit = opts.assert;\n        this.err(r.fluenterror, r);\n      }\n      return r;\n    }, this);\n    if (this.hasError() && !opts.assert) {\n      this.reject(results);\n    } else if (!this.hasError()) {\n      this.resolve(results);\n    }\n    return results;\n  };\n\n\n  /** Private workhorse method. Convert a single resume. */\n\n  _convertOne = function(src, dst, idx) {\n    var rinfo, s, srcFmt, targetFormat;\n    rinfo = ResumeFactory.loadOne(src, {\n      format: null,\n      objectify: true\n    });\n    if (rinfo.fluenterror) {\n      return rinfo;\n    }\n    s = rinfo.rez;\n    srcFmt = ((s.basics && s.basics.imp) || s.imp).orgFormat === 'JRS' ? 'JRS' : 'FRESH';\n    targetFormat = srcFmt === 'JRS' ? 'FRESH' : 'JRS';\n    this.stat(HMEVENT.beforeConvert, {\n      srcFile: rinfo.file,\n      srcFmt: srcFmt,\n      dstFile: dst[idx],\n      dstFmt: targetFormat\n    });\n    s.saveAs(dst[idx], targetFormat);\n    return s;\n  };\n\n}).call(this);\n\n//# sourceMappingURL=convert.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/verbs/create.js":"\n/**\nImplementation of the 'create' verb for HackMyResume.\n@module verbs/create\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var CreateVerb, HMEVENT, HMSTATUS, MKDIRP, PATH, Verb, _, _create, _createOne, chalk,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  MKDIRP = require('mkdirp');\n\n  PATH = require('path');\n\n  chalk = require('chalk');\n\n  Verb = require('../verbs/verb');\n\n  _ = require('underscore');\n\n  HMSTATUS = require('../core/status-codes');\n\n  HMEVENT = require('../core/event-codes');\n\n  module.exports = CreateVerb = (function(superClass) {\n    extend(CreateVerb, superClass);\n\n    function CreateVerb() {\n      CreateVerb.__super__.constructor.call(this, 'new', _create);\n    }\n\n    return CreateVerb;\n\n  })(Verb);\n\n\n  /** Create a new empty resume in either FRESH or JRS format. */\n\n  _create = function(src, dst, opts) {\n    var results;\n    if (!src || !src.length) {\n      this.err(HMSTATUS.createNameMissing, {\n        quit: true\n      });\n      return null;\n    }\n    results = _.map(src, function(t) {\n      var r;\n      if (opts.assert && this.hasError()) {\n        return {};\n      }\n      r = _createOne.call(this, t, opts);\n      if (r.fluenterror) {\n        r.quit = opts.assert;\n        this.err(r.fluenterror, r);\n      }\n      return r;\n    }, this);\n    if (this.hasError() && !opts.assert) {\n      this.reject(this.errorCode);\n    } else if (!this.hasError()) {\n      this.resolve(results);\n    }\n    return results;\n  };\n\n\n  /** Create a single new resume */\n\n  _createOne = function(t, opts) {\n    var RezClass, newRez, ret, safeFmt;\n    try {\n      ret = null;\n      safeFmt = opts.format.toUpperCase();\n      this.stat(HMEVENT.beforeCreate, {\n        fmt: safeFmt,\n        file: t\n      });\n      MKDIRP.sync(PATH.dirname(t));\n      RezClass = require('../core/' + safeFmt.toLowerCase() + '-resume');\n      newRez = RezClass[\"default\"]();\n      newRez.save(t);\n      ret = newRez;\n    } catch (_error) {\n      ret = {\n        fluenterror: HMSTATUS.createError,\n        inner: _error\n      };\n    } finally {\n      this.stat(HMEVENT.afterCreate, {\n        fmt: safeFmt,\n        file: t,\n        isError: ret.fluenterror\n      });\n      return ret;\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=create.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/verbs/peek.js":"\n/**\nImplementation of the 'peek' verb for HackMyResume.\n@module verbs/peek\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var HMEVENT, HMSTATUS, PeekVerb, Verb, _, __, _peek, _peekOne, safeLoadJSON,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Verb = require('../verbs/verb');\n\n  _ = require('underscore');\n\n  __ = require('lodash');\n\n  safeLoadJSON = require('../utils/safe-json-loader');\n\n  HMSTATUS = require('../core/status-codes');\n\n  HMEVENT = require('../core/event-codes');\n\n  module.exports = PeekVerb = (function(superClass) {\n    extend(PeekVerb, superClass);\n\n    function PeekVerb() {\n      PeekVerb.__super__.constructor.call(this, 'peek', _peek);\n    }\n\n    return PeekVerb;\n\n  })(Verb);\n\n\n  /** Peek at a resume, resume section, or resume field. */\n\n  _peek = function(src, dst, opts) {\n    var objPath, results;\n    if (!src || !src.length) {\n      this.err(HMSTATUS.resumeNotFound, {\n        quit: true\n      });\n      return null;\n    }\n    objPath = (dst && dst[0]) || '';\n    results = _.map(src, function(t) {\n      var tgt;\n      if (opts.assert && this.hasError()) {\n        return {};\n      }\n      tgt = _peekOne.call(this, t, objPath);\n      if (tgt.error) {\n        this.setError(tgt.error.fluenterror, tgt.error);\n      }\n      return tgt;\n    }, this);\n    if (this.hasError() && !opts.assert) {\n      this.reject(this.errorCode);\n    } else if (!this.hasError()) {\n      this.resolve(results);\n    }\n    return results;\n  };\n\n\n  /** Peek at a single resume, resume section, or resume field. */\n\n  _peekOne = function(t, objPath) {\n    var errCode, obj, pkgError, tgt;\n    this.stat(HMEVENT.beforePeek, {\n      file: t,\n      target: objPath\n    });\n    obj = safeLoadJSON(t);\n    tgt = null;\n    if (!obj.ex) {\n      tgt = objPath ? __.get(obj.json, objPath) : obj.json;\n    }\n    pkgError = null;\n    if (obj.ex) {\n      errCode = obj.ex.operation === 'parse' ? HMSTATUS.parseError : HMSTATUS.readError;\n      if (errCode === HMSTATUS.readError) {\n        obj.ex.quiet = true;\n      }\n      pkgError = {\n        fluenterror: errCode,\n        inner: obj.ex\n      };\n    }\n    this.stat(HMEVENT.afterPeek, {\n      file: t,\n      requested: objPath,\n      target: obj.ex ? void 0 : tgt,\n      error: pkgError\n    });\n    return {\n      val: obj.ex ? void 0 : tgt,\n      error: pkgError\n    };\n  };\n\n}).call(this);\n\n//# sourceMappingURL=peek.js.map\n","/home/travis/build/npmtest/node-npmtest-hackmyresume/node_modules/hackmyresume/dist/generators/yaml-generator.js":"\n/**\nDefinition of the YAMLGenerator class.\n@module yaml-generator.js\n@license MIT. See LICENSE.md for details.\n */\n\n(function() {\n  var TemplateGenerator, YAMLGenerator,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  TemplateGenerator = require('./template-generator');\n\n\n  /**\n  YamlGenerator generates a YAML-formatted resume via TemplateGenerator.\n   */\n\n  module.exports = YAMLGenerator = (function(superClass) {\n    extend(YAMLGenerator, superClass);\n\n    function YAMLGenerator() {\n      YAMLGenerator.__super__.constructor.call(this, 'yml', 'yml');\n    }\n\n    return YAMLGenerator;\n\n  })(TemplateGenerator);\n\n}).call(this);\n\n//# sourceMappingURL=yaml-generator.js.map\n"}